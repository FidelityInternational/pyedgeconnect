{
    "annotations": {
        "list": [
            {
                "builtIn": 1,
                "datasource": {
                    "type": "grafana",
                    "uid": "-- Grafana --"
                },
                "enable": true,
                "hide": true,
                "iconColor": "rgba(0, 211, 255, 1)",
                "name": "Annotations & Alerts",
                "target": {
                    "limit": 100,
                    "matchAny": false,
                    "tags": [],
                    "type": "dashboard"
                },
                "type": "dashboard"
            }
        ]
    },
    "editable": true,
    "fiscalYearStartMonth": 0,
    "graphTooltip": 0,
    "id": 3,
    "links": [],
    "liveNow": false,
    "panels": [
        {
            "datasource": {
                "type": "datasource",
                "uid": "grafana"
            },
            "description": "This example code serves to demonstrate the possibilities in\nretrieving telemetry data from Orchestrator and EdgeConnect and\nvisuzalize it. The demo is simple to run, however, modifying\nand/or incorporating components of this work into your own solution\nrequires a greater understanding of Python, Docker, InfluxDB,\nGrafana, and Redis.\n\n\nAll of these components are not necessarily required for developing\nyour own solution as there may be pieces of data you don't need\nto collect, some additional others that you want to add,\nsubstitude alternative tools for task queuing, database, and\nvisualization or alerting needs.",
            "gridPos": {
                "h": 2,
                "w": 24,
                "x": 0,
                "y": 0
            },
            "id": 19,
            "options": {
                "content": "<h1 style=\"color:red;text-align:center;\">THIS DEMO IS NOT MEANT TO BE A PRODUCTION MONITORING SOLUTION</h1>",
                "mode": "html"
            },
            "pluginVersion": "9.1.6",
            "transparent": true,
            "type": "text"
        },
        {
            "collapsed": false,
            "gridPos": {
                "h": 1,
                "w": 24,
                "x": 0,
                "y": 2
            },
            "id": 12,
            "panels": [],
            "title": "System",
            "type": "row"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Appliance state to Orchestrator value mapping\n\n\n0 - Unknown ( When an appliance is added to Orchestrator, it\n          is in this state )\n\n\n1 - Normal ( Appliance is reachable from Orchestrator)\n\n\n2 - Unreachable ( Appliance is unreachable from Orchestrator )\n\n\n3 - Unsupported Version ( Orchestrator does not support this version of the appliance )\n\n\n4 - Out of Synchronization ( Orchestrator's cache of appliance configuration/state is out of sync with the configuration/state on the appliance )\n\n\n5 - Synchronization in Progress ( Orchestrator is currently synchronizing appliances's configuration and state )\n",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "thresholds"
                    },
                    "mappings": [
                        {
                            "options": {
                                "0": {
                                    "color": "dark-red",
                                    "index": 0,
                                    "text": "Unknown"
                                },
                                "1": {
                                    "color": "green",
                                    "index": 1,
                                    "text": "Normal"
                                },
                                "2": {
                                    "color": "red",
                                    "index": 2,
                                    "text": "Unreachable (from Orchestrator)"
                                },
                                "3": {
                                    "color": "orange",
                                    "index": 3,
                                    "text": "Unsupported Version"
                                },
                                "4": {
                                    "color": "purple",
                                    "index": 4,
                                    "text": "Out of Synchronization"
                                },
                                "5": {
                                    "color": "blue",
                                    "index": 5,
                                    "text": "Synchronization in Progress"
                                }
                            },
                            "type": "value"
                        }
                    ],
                    "max": 5,
                    "min": 0,
                    "noValue": "0",
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "dark-blue",
                                "value": null
                            },
                            {
                                "color": "green",
                                "value": 1
                            },
                            {
                                "color": "dark-red",
                                "value": 2
                            },
                            {
                                "color": "light-red",
                                "value": 3
                            },
                            {
                                "color": "light-purple",
                                "value": 4
                            },
                            {
                                "color": "light-blue",
                                "value": 5
                            }
                        ]
                    }
                },
                "overrides": []
            },
            "gridPos": {
                "h": 2,
                "w": 3,
                "x": 0,
                "y": 3
            },
            "id": 2,
            "options": {
                "colorMode": "background",
                "graphMode": "none",
                "justifyMode": "auto",
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "textMode": "auto"
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"appliance_metadata\")\n  |> filter(fn: (r) => r[\"_field\"] == \"appliance_state\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")",
                    "refId": "A"
                }
            ],
            "title": "State (To Orch)",
            "type": "stat"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "fixedColor": "orange",
                        "mode": "fixed"
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    }
                },
                "overrides": []
            },
            "gridPos": {
                "h": 2,
                "w": 2,
                "x": 3,
                "y": 3
            },
            "id": 67,
            "options": {
                "colorMode": "background",
                "graphMode": "area",
                "justifyMode": "auto",
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "/^_value$/",
                    "values": false
                },
                "textMode": "auto"
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"appliance_metadata\")\n  |> filter(fn: (r) => r[\"_field\"] == \"model\")\n  |> keep(columns: [\"_value\"])\n  |> last()",
                    "refId": "Model"
                }
            ],
            "title": "Model",
            "type": "stat"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "fixedColor": "orange",
                        "mode": "fixed"
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    }
                },
                "overrides": []
            },
            "gridPos": {
                "h": 2,
                "w": 3,
                "x": 5,
                "y": 3
            },
            "id": 66,
            "options": {
                "colorMode": "background",
                "graphMode": "none",
                "justifyMode": "auto",
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "/^_value$/",
                    "values": false
                },
                "text": {},
                "textMode": "auto"
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"appliance_metadata\")\n  |> filter(fn: (r) => r[\"_field\"] == \"software_version\")\n  |> keep(columns: [\"_value\"])\n  |> last()",
                    "refId": "Software"
                }
            ],
            "title": "Software Version",
            "type": "stat"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Current alarms on the appliance. Will include alarms that may have been configured to ignore at Orchestrator level",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "thresholds"
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    }
                },
                "overrides": [
                    {
                        "matcher": {
                            "id": "byRegexp",
                            "options": "/minor/"
                        },
                        "properties": [
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "yellow",
                                    "mode": "fixed"
                                }
                            }
                        ]
                    },
                    {
                        "matcher": {
                            "id": "byRegexp",
                            "options": "/warning/"
                        },
                        "properties": [
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "#17f9ff",
                                    "mode": "fixed"
                                }
                            }
                        ]
                    },
                    {
                        "matcher": {
                            "id": "byRegexp",
                            "options": "/major/"
                        },
                        "properties": [
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "orange",
                                    "mode": "fixed"
                                }
                            }
                        ]
                    },
                    {
                        "matcher": {
                            "id": "byRegexp",
                            "options": "/critical/"
                        },
                        "properties": [
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "red",
                                    "mode": "fixed"
                                }
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 6,
                "w": 8,
                "x": 8,
                "y": 3
            },
            "id": 71,
            "options": {
                "colorMode": "background",
                "graphMode": "none",
                "justifyMode": "auto",
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "textMode": "auto"
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"alarm_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"critical_alarms\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"critical\"}))\n  |> yield(name: \"critical\")\n\nfrom(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"alarm_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"major_alarms\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"major\"}))\n  |> yield(name: \"major\")\n\nfrom(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"alarm_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"minor_alarms\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"minor\"}))\n  |> yield(name: \"minor\")\n\n  from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"alarm_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"warning_alarms\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"warning\"}))\n  |> yield(name: \"warning\")",
                    "refId": "Alarms"
                }
            ],
            "title": "Current Alarms",
            "transformations": [],
            "type": "stat"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Alarms on the appliance over time. Will include alarms that may have been configured to ignore at Orchestrator level",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "axisSoftMax": 5,
                        "barAlignment": 0,
                        "drawStyle": "bars",
                        "fillOpacity": 84,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 5,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "normal"
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "mappings": [],
                    "min": 0,
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    }
                },
                "overrides": [
                    {
                        "matcher": {
                            "id": "byRegexp",
                            "options": "/minor/"
                        },
                        "properties": [
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "yellow",
                                    "mode": "fixed"
                                }
                            }
                        ]
                    },
                    {
                        "matcher": {
                            "id": "byRegexp",
                            "options": "/warning/"
                        },
                        "properties": [
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "#17f9ff",
                                    "mode": "fixed"
                                }
                            }
                        ]
                    },
                    {
                        "matcher": {
                            "id": "byRegexp",
                            "options": "/major/"
                        },
                        "properties": [
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "orange",
                                    "mode": "fixed"
                                }
                            }
                        ]
                    },
                    {
                        "matcher": {
                            "id": "byRegexp",
                            "options": "/critical/"
                        },
                        "properties": [
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "red",
                                    "mode": "fixed"
                                }
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 6,
                "w": 8,
                "x": 16,
                "y": 3
            },
            "id": 36,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "multi",
                    "sort": "none"
                }
            },
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"alarm_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"critical_alarms\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"critical\"}))\n  |> yield(name: \"critical\")\n\nfrom(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"alarm_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"major_alarms\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"major\"}))\n  |> yield(name: \"major\")\n\nfrom(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"alarm_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"minor_alarms\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"minor\"}))\n  |> yield(name: \"minor\")\n\n  from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"alarm_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"warning_alarms\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"warning\"}))\n  |> yield(name: \"warning\")",
                    "refId": "Alarms"
                }
            ],
            "title": "Alarm History",
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Appliance reachability to Orchestrator value mapping\n\n\n0 – Unknown\n\n\n1 - Orchestrator talks to appliance using HTTP/HTTPS using user id and password. This is not used for EdgeConnects and SD-WAN\n\n\n2 - Appliance connects to Orchestrator using HTTPS Websocket. Orchestrator uses this permanent connection to configure/monitor appliance. This is done because Appliance may be behind a firewall making it hard for Orchestrator to contact appliance using IP address\n\n\n4 - Orchestrator sends configuration/monitoring request to Aruba Cloud Portal which relays those requests to Appliance. Appliance sends its response to Cloud Portal which relays it back to Orchestrator\n",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "thresholds"
                    },
                    "mappings": [
                        {
                            "options": {
                                "0": {
                                    "color": "red",
                                    "index": 0,
                                    "text": "Unknown"
                                },
                                "1": {
                                    "color": "yellow",
                                    "index": 1,
                                    "text": "N/A for EdgeConnect/SDWAN"
                                },
                                "2": {
                                    "color": "green",
                                    "index": 2,
                                    "text": "via Websocket"
                                },
                                "4": {
                                    "color": "#FA6400",
                                    "index": 3,
                                    "text": "via Cloud Portal"
                                }
                            },
                            "type": "value"
                        }
                    ],
                    "max": 4,
                    "min": 0,
                    "noValue": "0",
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "dark-red",
                                "value": null
                            },
                            {
                                "color": "green",
                                "value": 2
                            },
                            {
                                "color": "orange",
                                "value": 4
                            }
                        ]
                    }
                },
                "overrides": []
            },
            "gridPos": {
                "h": 2,
                "w": 3,
                "x": 0,
                "y": 5
            },
            "id": 3,
            "options": {
                "colorMode": "background",
                "graphMode": "none",
                "justifyMode": "auto",
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "textMode": "auto"
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"appliance_metadata\")\n  |> filter(fn: (r) => r[\"_field\"] == \"appliance_reachability\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")",
                    "refId": "A"
                }
            ],
            "title": "Reachability (To Orch)",
            "type": "stat"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "An appliance is either designated as a hub or spoke/mesh designated as non-hub",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "fixedColor": "orange",
                        "mode": "fixed"
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    }
                },
                "overrides": []
            },
            "gridPos": {
                "h": 2,
                "w": 2,
                "x": 3,
                "y": 5
            },
            "id": 69,
            "options": {
                "colorMode": "background",
                "graphMode": "none",
                "justifyMode": "auto",
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "/^_value$/",
                    "values": false
                },
                "textMode": "auto"
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"appliance_metadata\")\n  |> filter(fn: (r) => r[\"_field\"] == \"network_role\")\n  |> keep(columns: [\"_value\"])\n  |> last()",
                    "refId": "Role"
                }
            ],
            "title": "Role",
            "type": "stat"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "fixedColor": "orange",
                        "mode": "fixed"
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    }
                },
                "overrides": []
            },
            "gridPos": {
                "h": 2,
                "w": 3,
                "x": 5,
                "y": 5
            },
            "id": 68,
            "options": {
                "colorMode": "background",
                "graphMode": "none",
                "justifyMode": "auto",
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "/^_value$/",
                    "values": false
                },
                "textMode": "auto"
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"appliance_metadata\")\n  |> filter(fn: (r) => r[\"_field\"] == \"platform\")\n  |> keep(columns: [\"_value\"])\n  |> last()",
                    "refId": "Platform"
                }
            ],
            "title": "Platform",
            "type": "stat"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "fixedColor": "orange",
                        "mode": "fixed"
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "dtdurationms"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 2,
                "w": 3,
                "x": 0,
                "y": 7
            },
            "id": 214,
            "options": {
                "colorMode": "background",
                "graphMode": "none",
                "justifyMode": "auto",
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "textMode": "auto"
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"appliance_metadata\")\n  |> filter(fn: (r) => r[\"_field\"] == \"uptime\")\n  |> keep(columns: [\"_value\"])\n  |> last()",
                    "refId": "Uptime"
                }
            ],
            "title": "Uptime",
            "type": "stat"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "fixedColor": "orange",
                        "mode": "fixed"
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    }
                },
                "overrides": []
            },
            "gridPos": {
                "h": 2,
                "w": 3,
                "x": 3,
                "y": 7
            },
            "id": 70,
            "options": {
                "colorMode": "background",
                "graphMode": "none",
                "justifyMode": "auto",
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "/^_value$/",
                    "values": false
                },
                "textMode": "auto"
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"appliance_metadata\")\n  |> filter(fn: (r) => r[\"_field\"] == \"license_display\")\n  |> keep(columns: [\"_value\"])\n  |> last()",
                    "refId": "License"
                }
            ],
            "title": "License",
            "type": "stat"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "This is the configured memory on an appliance",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "fixedColor": "orange",
                        "mode": "fixed"
                    },
                    "decimals": 0,
                    "mappings": [],
                    "min": 0,
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            }
                        ]
                    },
                    "unit": "deckbytes"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 2,
                "w": 2,
                "x": 6,
                "y": 7
            },
            "id": 72,
            "options": {
                "colorMode": "background",
                "graphMode": "none",
                "justifyMode": "auto",
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "textMode": "auto"
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"memory_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"total_memory\")\n  |> last()",
                    "refId": "Configured Memory"
                }
            ],
            "title": "Memory",
            "type": "stat"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Appliance state to Orchestrator value mapping\n\n\n0 - Unknown ( When an appliance is added to Orchestrator, it\n          is in this state )\n\n\n1 - Normal ( Appliance is reachable from Orchestrator)\n\n\n2 - Unreachable ( Appliance is unreachable from Orchestrator )\n\n\n3 - Unsupported Version ( Orchestrator does not support this version of the appliance )\n\n\n4 - Out of Synchronization ( Orchestrator's cache of appliance configuration/state is out of sync with the configuration/state on the appliance )\n\n\n5 - Synchronization in Progress ( Orchestrator is currently synchronizing appliances's configuration and state )\n",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "left",
                        "axisWidth": 120,
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 0,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 5,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "none"
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "mappings": [
                        {
                            "options": {
                                "0": {
                                    "color": "dark-red",
                                    "index": 0,
                                    "text": "Unknown"
                                },
                                "1": {
                                    "color": "green",
                                    "index": 1,
                                    "text": "Normal"
                                },
                                "2": {
                                    "color": "red",
                                    "index": 2,
                                    "text": "Unreachable"
                                },
                                "3": {
                                    "color": "orange",
                                    "index": 3,
                                    "text": "Unsupported Ver."
                                },
                                "4": {
                                    "color": "purple",
                                    "index": 4,
                                    "text": "Out of Sync"
                                },
                                "5": {
                                    "color": "blue",
                                    "index": 5,
                                    "text": "Sync in Progress"
                                }
                            },
                            "type": "value"
                        }
                    ],
                    "max": 5,
                    "min": 0,
                    "noValue": "0",
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "dark-blue",
                                "value": null
                            },
                            {
                                "color": "green",
                                "value": 1
                            },
                            {
                                "color": "dark-red",
                                "value": 2
                            },
                            {
                                "color": "light-red",
                                "value": 3
                            },
                            {
                                "color": "light-purple",
                                "value": 4
                            },
                            {
                                "color": "light-blue",
                                "value": 5
                            }
                        ]
                    }
                },
                "overrides": []
            },
            "gridPos": {
                "h": 7,
                "w": 8,
                "x": 0,
                "y": 9
            },
            "id": 211,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "single",
                    "sort": "none"
                }
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"appliance_metadata\")\n  |> filter(fn: (r) => r[\"_field\"] == \"appliance_state\")\n  |> map(fn: (r) => ({_time:r._time, _value:r._value, _field:r._field}))\n  |> yield(name: \"last\")",
                    "refId": "State"
                }
            ],
            "title": "Appliance State (To Orchestrator)",
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Memory utilization can often be high on an appliance. The thresholds are configured to values that should be monitored regarding Free Memory dropping below 256MB and Swap Used climbing above 2MB",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "continuous-GrYlRd"
                    },
                    "decimals": 0,
                    "mappings": [],
                    "min": 0,
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            }
                        ]
                    },
                    "unit": "deckbytes"
                },
                "overrides": [
                    {
                        "matcher": {
                            "id": "byFrameRefID",
                            "options": "Free Memory"
                        },
                        "properties": [
                            {
                                "id": "thresholds",
                                "value": {
                                    "mode": "absolute",
                                    "steps": [
                                        {
                                            "color": "dark-red",
                                            "value": null
                                        },
                                        {
                                            "color": "red",
                                            "value": 200000
                                        },
                                        {
                                            "color": "dark-green",
                                            "value": 256000
                                        }
                                    ]
                                }
                            },
                            {
                                "id": "color",
                                "value": {
                                    "mode": "thresholds"
                                }
                            }
                        ]
                    },
                    {
                        "matcher": {
                            "id": "byFrameRefID",
                            "options": "Swap Used"
                        },
                        "properties": [
                            {
                                "id": "thresholds",
                                "value": {
                                    "mode": "absolute",
                                    "steps": [
                                        {
                                            "color": "green",
                                            "value": null
                                        },
                                        {
                                            "color": "red",
                                            "value": 2000
                                        }
                                    ]
                                }
                            },
                            {
                                "id": "color",
                                "value": {
                                    "mode": "thresholds"
                                }
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 3,
                "w": 8,
                "x": 8,
                "y": 9
            },
            "id": 121,
            "options": {
                "colorMode": "background",
                "graphMode": "none",
                "justifyMode": "auto",
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "textMode": "auto"
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"memory_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"free_memory\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Free Memory\"}))\n  |> yield(name: \"last\")",
                    "refId": "Free Memory"
                },
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"memory_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"swap_used\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Swap Used\"}))\n  |> yield(name: \"last\")",
                    "refId": "Swap Used"
                }
            ],
            "title": "Free Memory / Swap Used",
            "type": "stat"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Current route table sizes. Two separate tables for IPv4 and IPv6, each with a limit of 30,000 routes based on current software as of 9.2",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "thresholds"
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "green",
                                "value": 10000
                            },
                            {
                                "color": "super-light-yellow",
                                "value": 15000
                            },
                            {
                                "color": "yellow",
                                "value": 20000
                            },
                            {
                                "color": "orange",
                                "value": 25000
                            },
                            {
                                "color": "red",
                                "value": 27000
                            },
                            {
                                "color": "dark-red",
                                "value": 28000
                            }
                        ]
                    }
                },
                "overrides": []
            },
            "gridPos": {
                "h": 3,
                "w": 8,
                "x": 16,
                "y": 9
            },
            "id": 23,
            "options": {
                "colorMode": "background",
                "graphMode": "none",
                "justifyMode": "auto",
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "text": {},
                "textMode": "value_and_name"
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"route_table_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"total_v4_routes\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"v4\"}))\n  |> yield(name: \"v4\")\n\nfrom(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"route_table_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"total_v6_routes\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"v6\"}))\n  |> yield(name: \"v6\")",
                    "refId": "Route Table"
                }
            ],
            "title": "Current Route Table",
            "type": "stat"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Memory utilization can often be high on an appliance. The thresholds are configured to values that should be monitored regarding Free Memory dropping below 256MB and Swap Used climbing above 2MB",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "continuous-GrYlRd"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 30,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 5,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "none"
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "decimals": 0,
                    "mappings": [],
                    "min": 0,
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            }
                        ]
                    },
                    "unit": "deckbytes"
                },
                "overrides": [
                    {
                        "matcher": {
                            "id": "byFrameRefID",
                            "options": "Free Memory"
                        },
                        "properties": [
                            {
                                "id": "thresholds",
                                "value": {
                                    "mode": "absolute",
                                    "steps": [
                                        {
                                            "color": "dark-red",
                                            "value": null
                                        },
                                        {
                                            "color": "red",
                                            "value": 200000
                                        },
                                        {
                                            "color": "dark-green",
                                            "value": 256000
                                        }
                                    ]
                                }
                            },
                            {
                                "id": "color",
                                "value": {
                                    "mode": "thresholds"
                                }
                            }
                        ]
                    },
                    {
                        "matcher": {
                            "id": "byFrameRefID",
                            "options": "Swap Used"
                        },
                        "properties": [
                            {
                                "id": "thresholds",
                                "value": {
                                    "mode": "absolute",
                                    "steps": [
                                        {
                                            "color": "green",
                                            "value": null
                                        },
                                        {
                                            "color": "red",
                                            "value": 2000
                                        }
                                    ]
                                }
                            },
                            {
                                "id": "color",
                                "value": {
                                    "mode": "thresholds"
                                }
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 4,
                "w": 8,
                "x": 8,
                "y": 12
            },
            "id": 16,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [
                        "last",
                        "max"
                    ],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "multi",
                    "sort": "none"
                }
            },
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"memory_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"free_memory\")\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Free Memory\"}))\n  |> yield(name: \"last\")",
                    "refId": "Free Memory"
                },
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"memory_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"swap_used\")\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Swap Used\"}))\n  |> yield(name: \"last\")",
                    "refId": "Swap Used"
                }
            ],
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Route table sizes over time. Two separate tables for IPv4 and IPv6, each with a limit of 30,000 routes based on current software as of 9.2",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 0,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 5,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "none"
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "green",
                                "value": 10000
                            },
                            {
                                "color": "super-light-yellow",
                                "value": 15000
                            },
                            {
                                "color": "yellow",
                                "value": 20000
                            },
                            {
                                "color": "orange",
                                "value": 25000
                            },
                            {
                                "color": "red",
                                "value": 27000
                            },
                            {
                                "color": "dark-red",
                                "value": 28000
                            }
                        ]
                    }
                },
                "overrides": []
            },
            "gridPos": {
                "h": 4,
                "w": 8,
                "x": 16,
                "y": 12
            },
            "id": 212,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "multi",
                    "sort": "none"
                }
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"route_table_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"total_v4_routes\" or r[\"_field\"] == \"total_v6_routes\")\n  |> map(fn: (r) => ({_value:r._value,_time:r._time, _field:r._field}))\n  |> yield(name: \"last\")",
                    "refId": "Route Table"
                }
            ],
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Appliance reachability to Orchestrator value mapping\n\n\n0 – Unknown\n\n\n1 - Orchestrator talks to appliance using HTTP/HTTPS using user id and password. This is not used for EdgeConnects and SD-WAN\n\n\n2 - Appliance connects to Orchestrator using HTTPS Websocket. Orchestrator uses this permanent connection to configure/monitor appliance. This is done because Appliance may be behind a firewall making it hard for Orchestrator to contact appliance using IP address\n\n\n4 - Orchestrator sends configuration/monitoring request to Aruba Cloud Portal which relays those requests to Appliance. Appliance sends its response to Cloud Portal which relays it back to Orchestrator\n",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "left",
                        "axisWidth": 120,
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 0,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 5,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "none"
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "mappings": [
                        {
                            "options": {
                                "0": {
                                    "color": "red",
                                    "index": 0,
                                    "text": "Unknown"
                                },
                                "1": {
                                    "color": "yellow",
                                    "index": 1,
                                    "text": "N / A"
                                },
                                "2": {
                                    "color": "green",
                                    "index": 2,
                                    "text": "via Websocket"
                                },
                                "3": {
                                    "index": 4,
                                    "text": "N / A"
                                },
                                "4": {
                                    "color": "orange",
                                    "index": 3,
                                    "text": "via Cloud Portal"
                                }
                            },
                            "type": "value"
                        }
                    ],
                    "max": 4,
                    "min": 0,
                    "noValue": "0",
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "dark-red",
                                "value": null
                            },
                            {
                                "color": "green",
                                "value": 2
                            },
                            {
                                "color": "orange",
                                "value": 4
                            }
                        ]
                    }
                },
                "overrides": []
            },
            "gridPos": {
                "h": 7,
                "w": 8,
                "x": 0,
                "y": 16
            },
            "id": 210,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "single",
                    "sort": "none"
                }
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"appliance_metadata\")\n  |> filter(fn: (r) => r[\"_field\"] == \"appliance_reachability\")\n  |> map(fn: (r) => ({_time:r._time, _value:r._value, _field:r._field}))\n  |> yield(name: \"last\")",
                    "refId": "Reachability"
                }
            ],
            "title": "Appliance Reachability (To Orchestrator)",
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "CPU utilization can normally be high on an appliance. Monitoring Idle dropping overly low is indicative of resource issues. Which cpu # is most critical for functions varies by hardware platform",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "thresholds",
                        "seriesBy": "last"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "Idle %",
                        "axisPlacement": "auto",
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 0,
                        "gradientMode": "scheme",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 2,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "none"
                        },
                        "thresholdsStyle": {
                            "mode": "area"
                        }
                    },
                    "decimals": 0,
                    "mappings": [],
                    "max": 20,
                    "min": 0,
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "dark-red",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 3
                            },
                            {
                                "color": "#EAB839",
                                "value": 5
                            },
                            {
                                "color": "green",
                                "value": 10
                            }
                        ]
                    },
                    "unit": "percent"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 7,
                "w": 8,
                "x": 8,
                "y": 16
            },
            "id": 15,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "multi",
                    "sort": "asc"
                }
            },
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_stats\")\n  // Only show CPU values for those over 95% to limit noise in graph\n  |> filter(fn: (r) => r[\"_field\"] == \"cpu_pIdle\")\n  |> filter(fn: (r) => r[\"cpu_number\"] != \"ALL\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> keep(columns: [\"_value\", \"_time\", \"_field\", \"cpu_number\"])\n  |> yield(name: \"last\")",
                    "refId": "CPU"
                }
            ],
            "title": "CPU Idle (only below 20%)",
            "transformations": [],
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Many internal directories, /var notably stores sysdumps, and other important files",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "thresholds"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "Used %",
                        "axisPlacement": "auto",
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 0,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 5,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "none"
                        },
                        "thresholdsStyle": {
                            "mode": "area"
                        }
                    },
                    "decimals": 0,
                    "mappings": [],
                    "min": 0,
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "#EAB839",
                                "value": 90
                            },
                            {
                                "color": "red",
                                "value": 95
                            }
                        ]
                    },
                    "unit": "percent"
                },
                "overrides": [
                    {
                        "matcher": {
                            "id": "byRegexp",
                            "options": "/total/"
                        },
                        "properties": [
                            {
                                "id": "color",
                                "value": {
                                    "mode": "fixed"
                                }
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 7,
                "w": 8,
                "x": 16,
                "y": 16
            },
            "id": 17,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "multi",
                    "sort": "none"
                }
            },
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"disk_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"used_percent\")\n  |> filter(fn: (r) => r[\"disk_dir\"] == \"/\" or r[\"disk_dir\"] == \"/var\")\n  |> map(fn: (r) => ({_value:r._value,_time:r._time, _field:\"Directory\", disk_dir:r.disk_dir}))\n  |> yield(name: \"last\")",
                    "refId": "Disk"
                }
            ],
            "title": "Disk Utilization",
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Total Flows through an appliance, capacity of flows-per-second vary by platform. Total flows is calculated as transformation adding together created and existing flows.",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 30,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 2,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "normal"
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "none"
                },
                "overrides": [
                    {
                        "matcher": {
                            "id": "byName",
                            "options": "Total Flows"
                        },
                        "properties": [
                            {
                                "id": "custom.stacking",
                                "value": {
                                    "group": "A",
                                    "mode": "none"
                                }
                            },
                            {
                                "id": "custom.fillOpacity",
                                "value": 0
                            },
                            {
                                "id": "custom.lineWidth",
                                "value": 0
                            },
                            {
                                "id": "custom.showPoints",
                                "value": "never"
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 7,
                "w": 8,
                "x": 0,
                "y": 23
            },
            "id": 104,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "multi",
                    "sort": "none"
                }
            },
            "pluginVersion": "9.0.4",
            "repeatDirection": "h",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"flow_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"flows_created\")\n  |> filter(fn: (r) => r[\"traffic_type\"] == \"all_traffic\")\n//group by time to isolate the values you want to sum togehter\n  |> group(columns: [\"_time\"], mode:\"by\")\n  |> sum(column: \"_value\")\n//to ungroup your data provide a group without any columns\n  |> group()\n  |> rename(columns: {\"_value\":\"Flows Created\"})\n  |> yield()",
                    "refId": "Flows Created"
                },
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"flow_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"flows_exist\")\n  |> filter(fn: (r) => r[\"traffic_type\"] == \"all_traffic\")\n//group by time to isolate the values you want to sum togehter\n  |> group(columns: [\"_time\"], mode:\"by\")\n  |> sum(column: \"_value\")\n//to ungroup your data provide a group without any columns\n  |> group()\n  |> rename(columns: {\"_value\":\"Flows Exist\"})\n  |> yield()",
                    "refId": "Flows Exist"
                }
            ],
            "title": "Total Flows",
            "transformations": [
                {
                    "id": "calculateField",
                    "options": {
                        "alias": "Total Flows",
                        "mode": "reduceRow",
                        "reduce": {
                            "reducer": "sum"
                        }
                    }
                }
            ],
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Average PPS calculated from minute data and divided by 60, Realtime PPS is the current PPS at the time of query based on realtime second data",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 30,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 2,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "none"
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "none"
                },
                "overrides": [
                    {
                        "matcher": {
                            "id": "byFrameRefID",
                            "options": "Average PPS"
                        },
                        "properties": [
                            {
                                "id": "displayName",
                                "value": "Average Packets Per Second"
                            },
                            {
                                "id": "color",
                                "value": {
                                    "mode": "fixed"
                                }
                            }
                        ]
                    },
                    {
                        "matcher": {
                            "id": "byFrameRefID",
                            "options": "Point in Time"
                        },
                        "properties": [
                            {
                                "id": "displayName",
                                "value": "Realtime Packets Per Second"
                            },
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "green",
                                    "mode": "fixed"
                                }
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 7,
                "w": 8,
                "x": 8,
                "y": 23
            },
            "id": 128,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "multi",
                    "sort": "none"
                }
            },
            "pluginVersion": "9.0.4",
            "repeatDirection": "h",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"flow_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"lan_rx_packets\" or r[\"_field\"] == \"lan_tx_packets\" or r[\"_field\"] == \"wan_rx_packets\" or r[\"_field\"] == \"wan_tx_packets\")\n  |> filter(fn: (r) => r[\"traffic_type\"] == \"all_traffic\")\n  |> map(fn: (r) => ({r with _value: r._value / 60}))\n//group by time to isolate the values you want to sum togehter\n  |> group(columns: [\"_time\"], mode:\"by\")\n  |> sum(column: \"_value\")\n//to ungroup your data provide a group without any columns\n  |> group()\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: true)",
                    "refId": "Average PPS"
                },
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\n  |> filter(fn: (r) => r[\"_field\"] == \"pps\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: true)\n  |> yield(name: \"pps\")",
                    "refId": "Point in Time"
                }
            ],
            "title": "Packets Per Second",
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Each number code represents some sort of drops in the system – most of them are normal. Some of them are equivalent to “interface queue drops” on traditional routers. We are interested in these codes:\n\n\n8 – LAN Rx Queue Full\n\n\n18 – LAN Tx Queue Full\n\n\n19 – LAN Tx ZCI Queue Full\n\n\n31 – Wan Rx Queue Full\n\n\n53 – Wan Tx ZCI Queue Full\n\n\nDemo code currently aggregates all other drops into single code of \"Other\"",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 0,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 5,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "none"
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    }
                },
                "overrides": []
            },
            "gridPos": {
                "h": 7,
                "w": 8,
                "x": 16,
                "y": 23
            },
            "id": 106,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "single",
                    "sort": "none"
                }
            },
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "// Each number code represents some sort of drops in the\n// system – most of them are normal. Some of them are\n// equivalent to “interface queue drops” on traditional\n// routers. We are interested in these codes:\n// 8 – LAN Rx Queue Full\n// 18 – LAN Tx Queue Full\n// 19 – LAN Tx ZCI Queue Full\n// 31 – Wan Rx Queue Full\n// 53 – Wan Tx ZCI Queue Full\n// Demo code currently aggregates all other drops into single code of \"Other\"\n\nfrom(bucket: \"ECTELEM\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"drop_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"drop_count\")\n  |> filter(fn: (r) => r[\"drop_reason\"] != \"Other\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: true)\n  |> yield(name: \"last\")\n\n",
                    "refId": "Drops"
                }
            ],
            "title": "Drops",
            "type": "timeseries"
        },
        {
            "collapsed": false,
            "gridPos": {
                "h": 1,
                "w": 24,
                "x": 0,
                "y": 30
            },
            "id": 7,
            "panels": [],
            "title": "WAN Interfaces",
            "type": "row"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Pulls together system-wide deployment configuration and license values alongside real transmit/receive values. Appliances with Unlimited license will not display license value on graph",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "Inbound (-)  /  Outbound (+)",
                        "axisPlacement": "auto",
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 30,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 2,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "none"
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "decbits"
                },
                "overrides": [
                    {
                        "matcher": {
                            "id": "byRegexp",
                            "options": "/RX/"
                        },
                        "properties": [
                            {
                                "id": "custom.transform",
                                "value": "negative-Y"
                            }
                        ]
                    },
                    {
                        "matcher": {
                            "id": "byRegexp",
                            "options": "/Configured/"
                        },
                        "properties": [
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "dark-purple",
                                    "mode": "fixed"
                                }
                            },
                            {
                                "id": "custom.lineStyle",
                                "value": {
                                    "dash": [
                                        10,
                                        10
                                    ],
                                    "fill": "dash"
                                }
                            },
                            {
                                "id": "custom.lineWidth",
                                "value": 2
                            },
                            {
                                "id": "custom.fillOpacity",
                                "value": 0
                            }
                        ]
                    },
                    {
                        "matcher": {
                            "id": "byRegexp",
                            "options": "/License/"
                        },
                        "properties": [
                            {
                                "id": "custom.lineWidth",
                                "value": 3
                            },
                            {
                                "id": "custom.fillOpacity",
                                "value": 0
                            },
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "red",
                                    "mode": "fixed"
                                }
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 10,
                "w": 17,
                "x": 0,
                "y": 31
            },
            "id": 21,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [
                        "last",
                        "max"
                    ],
                    "displayMode": "table",
                    "placement": "right",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "multi",
                    "sort": "none"
                }
            },
            "repeatDirection": "h",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"flow_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"wan_rx_bytes\")\n  |> filter(fn: (r) => r[\"traffic_type\"] == \"all_traffic\")\n  |> map(fn: (r) => ({r with _value: r._value / 8}))\n  |> group(columns: [\"_time\"], mode:\"by\")\n  |> sum(column: \"_value\")\n  |> group()\n  |> rename(columns: {_value: \"Data RX\"})\n  |> yield()",
                    "refId": "Data RX"
                },
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"flow_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"wan_tx_bytes\")\n  |> filter(fn: (r) => r[\"traffic_type\"] == \"all_traffic\")\n  |> map(fn: (r) => ({r with _value: r._value / 8}))\n  |> group(columns: [\"_time\"], mode:\"by\")\n  |> sum(column: \"_value\")\n  |> group()\n  |> rename(columns: {_value: \"Data TX\"})\n  |> yield()",
                    "refId": "Data TX"
                },
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "RX = from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"deployment_info\")\n  |> filter(fn: (r) => r[\"_field\"] == \"wan_inbound_bw\")\n  |> filter(fn: (r) => r[\"interface_name\"] == \"SYSTEM\")\n  |> map(fn: (r) => ({r with _value: r._value * 1000}))\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Configured RX BW\"}))\n  |> yield(name:\"RX\")\n\nTX = from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"deployment_info\")\n  |> filter(fn: (r) => r[\"_field\"] == \"wan_outbound_bw\")\n  |> filter(fn: (r) => r[\"interface_name\"] == \"SYSTEM\")\n  |> map(fn: (r) => ({r with _value: r._value * 1000}))\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Configured TX BW\"}))\n|> yield(name:\"TX\")",
                    "refId": "Deployment RX / TX"
                },
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"appliance_metadata\")\n  // exclude showing license for Unlimited as value is irrelevent\n  |> filter(fn: (r) => r[\"_field\"] == \"license_bw\" and r._value < 1000000000)\n  |> map(fn: (r) => ({r with _value: r._value * 1000}))\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Bandwidth License TX\"}))",
                    "refId": "License Level up"
                },
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"appliance_metadata\")\n  // exclude showing license for Unlimited as value is irrelevent\n  |> filter(fn: (r) => r[\"_field\"] == \"license_bw\" and r._value < 1000000000)\n  |> map(fn: (r) => ({r with _value: r._value * 1000}))\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Bandwidth License RX\"}))",
                    "refId": "License Level down"
                }
            ],
            "title": "Aggregate WAN TX / RX",
            "transformations": [],
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "95th Percentile of real traffic inbound/outbound",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "thresholds"
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "bps"
                },
                "overrides": [
                    {
                        "matcher": {
                            "id": "byFrameRefID",
                            "options": "Data RX"
                        },
                        "properties": [
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "green",
                                    "mode": "fixed"
                                }
                            },
                            {
                                "id": "displayName",
                                "value": "Inbound"
                            }
                        ]
                    },
                    {
                        "matcher": {
                            "id": "byFrameRefID",
                            "options": "Data TX"
                        },
                        "properties": [
                            {
                                "id": "displayName",
                                "value": "Outbound"
                            },
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "yellow",
                                    "mode": "fixed"
                                }
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 10,
                "w": 3,
                "x": 17,
                "y": 31
            },
            "id": 92,
            "options": {
                "colorMode": "background",
                "graphMode": "none",
                "justifyMode": "auto",
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "textMode": "auto"
            },
            "pluginVersion": "9.1.6",
            "repeatDirection": "h",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"flow_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"wan_rx_bytes\")\n  |> filter(fn: (r) => r[\"traffic_type\"] == \"all_traffic\")\n  |> map(fn: (r) => ({r with _value: r._value / 8}))\n  |> group(columns: [\"_time\"], mode:\"by\")\n  |> sum(column: \"_value\")\n  |> group()\n  |> quantile(q: 0.95)",
                    "refId": "Data RX"
                },
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"flow_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"wan_tx_bytes\")\n  |> filter(fn: (r) => r[\"traffic_type\"] == \"all_traffic\")\n  |> map(fn: (r) => ({r with _value: r._value / 8}))\n  |> group(columns: [\"_time\"], mode:\"by\")\n  |> sum(column: \"_value\")\n  |> group()\n  |> quantile(q: 0.95)",
                    "refId": "Data TX"
                }
            ],
            "title": "95th Percentile",
            "type": "stat"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Max percentage utilization of real inbound/outbound compared to configured license and deployment values",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "thresholds"
                    },
                    "decimals": 2,
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "purple",
                                "value": 50
                            },
                            {
                                "color": "blue",
                                "value": 60
                            },
                            {
                                "color": "yellow",
                                "value": 70
                            },
                            {
                                "color": "#EF843C",
                                "value": 80
                            },
                            {
                                "color": "#E24D42",
                                "value": 90
                            }
                        ]
                    },
                    "unit": "percentunit"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 10,
                "w": 4,
                "x": 20,
                "y": 31
            },
            "id": 168,
            "options": {
                "colorMode": "background",
                "graphMode": "none",
                "justifyMode": "auto",
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "max"
                    ],
                    "fields": "",
                    "values": false
                },
                "text": {},
                "textMode": "auto"
            },
            "pluginVersion": "9.1.6",
            "repeatDirection": "h",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "lic = from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"appliance_metadata\")\n  // exclude showing license for Unlimited as value is irrelevent\n  |> filter(fn: (r) => r[\"_field\"] == \"license_bw\" and r._value < 1000000000)\n  |> map(fn: (r) => ({r with _value: r._value * 1000}))\n  |> aggregateWindow(every:1m,fn:last)\n  |> fill(column: \"_value\", usePrevious: true)\n\n\ndatarx = from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"flow_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"wan_rx_bytes\")\n  |> filter(fn: (r) => r[\"traffic_type\"] == \"all_traffic\")\n  |> map(fn: (r) => ({r with _value: r._value / 8}))\n  |> drop(columns: [\"flow_type\"])\n  |> aggregateWindow(every:1m,fn:last)\n  |> fill(column: \"_value\", usePrevious: true)\n\ndeprx = from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"deployment_info\")\n  |> filter(fn: (r) => r[\"_field\"] == \"wan_inbound_bw\")\n  |> filter(fn: (r) => r[\"interface_name\"] == \"SYSTEM\")\n  |> map(fn: (r) => ({r with _value: r._value * 1000}))\n  |> aggregateWindow(every:1m,fn:last)\n  |> fill(column: \"_value\", usePrevious: true)\n\n// Calculate Utilization of DataRX vs Deployment\njoin(tables:{deprx:deprx, datarx:datarx}, on:[\"_time\"])\n  |> map(fn:(r) => ({\n    \"RX Deployment\": float(v: r._value_datarx) / float(v: r._value_deprx) }))\n  |> last(column: \"RX Deployment\")\n  |> yield(name: \"inbound dep\")\n\n// Calculate Utilization of DataRX vs License\njoin(tables:{lic:lic, datarx:datarx}, on:[\"_time\"])\n  |> map(fn:(r) => ({\n    \"RX License\": float(v: r._value_datarx) / float(v: r._value_lic) }))\n  |> last(column: \"RX License\")\n  |> yield(name: \"inbound lic\")\n\ndatatx = from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"flow_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"wan_tx_bytes\")\n  |> filter(fn: (r) => r[\"traffic_type\"] == \"all_traffic\")\n  |> map(fn: (r) => ({r with _value: r._value / 8}))\n  |> drop(columns: [\"flow_type\"])\n  |> aggregateWindow(every:1m,fn:last)\n  |> fill(column: \"_value\", usePrevious: true)\n\ndeptx = from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"deployment_info\")\n  |> filter(fn: (r) => r[\"_field\"] == \"wan_outbound_bw\")\n  |> filter(fn: (r) => r[\"interface_name\"] == \"SYSTEM\")\n  |> map(fn: (r) => ({r with _value: r._value * 1000}))\n  |> aggregateWindow(every:1m,fn:last)\n  |> fill(column: \"_value\", usePrevious: true)\n\n// Calculate Utilization of DataTX vs Deployment\njoin(tables:{deptx:deptx, datatx:datatx}, on:[\"_time\"])\n  |> map(fn:(r) => ({\n    \"TX Deployment\": float(v: r._value_datatx) / float(v: r._value_deptx) }))\n  |> last(column: \"TX Deployment\")\n  |> yield(name: \"outbound\")\n\n// Calculate Utilization of DataTX vs License\njoin(tables:{lic:lic, datatx:datatx}, on:[\"_time\"])\n  |> map(fn:(r) => ({\n    \"TX License\": float(v: r._value_datatx) / float(v: r._value_lic) }))\n  |> last(column: \"TX License\")\n  |> yield(name: \"outbound lic\")",
                    "refId": "Deployment WAN Utilization"
                }
            ],
            "title": "Current WAN Utilization",
            "type": "stat"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Per-WAN Label deployment values and real inbound/outbound traffic",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "Inbound (-)  /  Outbound (+)",
                        "axisPlacement": "auto",
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 30,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 2,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "none"
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "decbits"
                },
                "overrides": [
                    {
                        "matcher": {
                            "id": "byRegexp",
                            "options": "/RX/"
                        },
                        "properties": [
                            {
                                "id": "custom.transform",
                                "value": "negative-Y"
                            }
                        ]
                    },
                    {
                        "matcher": {
                            "id": "byRegexp",
                            "options": "/Configured/"
                        },
                        "properties": [
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "dark-purple",
                                    "mode": "fixed"
                                }
                            },
                            {
                                "id": "custom.lineStyle",
                                "value": {
                                    "dash": [
                                        10,
                                        10
                                    ],
                                    "fill": "dash"
                                }
                            },
                            {
                                "id": "custom.lineWidth",
                                "value": 2
                            },
                            {
                                "id": "custom.fillOpacity",
                                "value": 0
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 10,
                "w": 6,
                "x": 0,
                "y": 41
            },
            "id": 9,
            "interval": "1m",
            "maxPerRow": 6,
            "options": {
                "legend": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "displayMode": "table",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "multi",
                    "sort": "none"
                }
            },
            "repeat": "wan_labels",
            "repeatDirection": "h",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"interface_stats\")\n  |> filter(fn: (r) => r[\"traffic_type\"] == \"all_traffic\")\n  |> filter(fn: (r) => r[\"_field\"] == \"bytes_rx\" or r[\"_field\"] == \"bytes_tx\")\n  |> filter(fn: (r) => r[\"interface_label\"] =~ /^${wan_labels}/)\n  |> map(fn: (r) => ({r with _value: r._value / 8}))\n  |> keep(columns: [\"_value\", \"_time\", \"_field\"])",
                    "refId": "Data RX / TX"
                },
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "RX = from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"deployment_info\")\n  |> filter(fn: (r) => r[\"_field\"] == \"wan_inbound_bw\")\n  |> filter(fn: (r) => r[\"interface_name\"] == \"SYSTEM\")\n  |> map(fn: (r) => ({r with _value: r._value * 1000}))\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Configured RX BW\"}))\n  |> yield(name:\"RX\")\n\nTX = from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"deployment_info\")\n  |> filter(fn: (r) => r[\"_field\"] == \"wan_outbound_bw\")\n  |> filter(fn: (r) => r[\"interface_name\"] == \"SYSTEM\")\n  |> map(fn: (r) => ({r with _value: r._value * 1000}))\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Configured TX BW\"}))\n  |> yield(name:\"TX\")",
                    "refId": "Deployment RX / TX"
                }
            ],
            "title": "${wan_labels}",
            "transformations": [
                {
                    "id": "renameByRegex",
                    "options": {
                        "regex": "(bytes_rx)(.*)",
                        "renamePattern": "Data RX"
                    }
                },
                {
                    "id": "renameByRegex",
                    "options": {
                        "regex": "(bytes_tx)(.*)",
                        "renamePattern": "Data TX"
                    }
                }
            ],
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Cumulative bytes inbound for each WAN label within the current time period",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "continuous-GrYlRd"
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "decbytes"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 51
            },
            "id": 182,
            "interval": "1m",
            "options": {
                "displayMode": "gradient",
                "minVizHeight": 10,
                "minVizWidth": 0,
                "orientation": "vertical",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "showUnfilled": true,
                "text": {}
            },
            "pluginVersion": "9.1.6",
            "repeatDirection": "h",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"interface_stats\")\n  |> filter(fn: (r) => r[\"traffic_type\"] == \"all_traffic\")\n  |> filter(fn: (r) => r[\"_field\"] == \"bytes_rx\")\n  |> filter(fn: (r) => r[\"interface_label\"] =~ /${wan_labels:regex}/)\n  //|> map(fn: (r) => ({r with _value: r._value / 8}))\n  |> keep(columns: [\"_value\", \"_time\", \"interface_label\"])\n  |> cumulativeSum()",
                    "refId": "Data RX"
                }
            ],
            "title": "Inbound Cumulative Bytes",
            "type": "bargauge"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Cumulative bytes outbound for each WAN label within the current time period",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "continuous-GrYlRd"
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "decbytes"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 51
            },
            "id": 183,
            "interval": "1m",
            "options": {
                "displayMode": "gradient",
                "minVizHeight": 10,
                "minVizWidth": 0,
                "orientation": "vertical",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "showUnfilled": true
            },
            "pluginVersion": "9.1.6",
            "repeatDirection": "h",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"interface_stats\")\n  |> filter(fn: (r) => r[\"traffic_type\"] == \"all_traffic\")\n  |> filter(fn: (r) => r[\"_field\"] == \"bytes_tx\")\n  |> filter(fn: (r) => r[\"interface_label\"] =~ /${wan_labels:regex}/)\n  //|> map(fn: (r) => ({r with _value: r._value / 8}))\n  |> keep(columns: [\"_value\", \"_time\", \"interface_label\"])\n  |> cumulativeSum()",
                    "refId": "Data TX"
                }
            ],
            "title": "Outbound Cumulative Bytes",
            "type": "bargauge"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Inbound bytes per WAN label over time, help identify what labels majority of traffic were utilizing. This behavior will greatly be determined by the Business Intent Overlay configuration",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "fillOpacity": 80,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineWidth": 1,
                        "scaleDistribution": {
                            "type": "linear"
                        }
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "decbytes"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 58
            },
            "id": 184,
            "interval": "1m",
            "options": {
                "barRadius": 0,
                "barWidth": 0.97,
                "groupWidth": 0.7,
                "legend": {
                    "calcs": [],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "orientation": "auto",
                "showValue": "auto",
                "stacking": "none",
                "tooltip": {
                    "mode": "multi",
                    "sort": "desc"
                },
                "xField": "Time",
                "xTickLabelMaxLength": 2,
                "xTickLabelRotation": -60,
                "xTickLabelSpacing": 100
            },
            "pluginVersion": "9.0.4",
            "repeatDirection": "h",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"interface_stats\")\n  |> filter(fn: (r) => r[\"traffic_type\"] == \"all_traffic\")\n  |> filter(fn: (r) => r[\"_field\"] == \"bytes_rx\")\n  |> filter(fn: (r) => r[\"interface_label\"] =~ /${wan_labels:regex}/)\n  |> keep(columns: [\"_value\", \"_time\", \"_field\", \"interface_label\"])",
                    "refId": "Data RX"
                }
            ],
            "title": "Inbound Bytes by Label",
            "type": "barchart"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Outbound bytes per WAN label over time, help identify what labels majority of traffic were utilizing. This behavior will greatly be determined by the Business Intent Overlay configuration",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "fillOpacity": 80,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineWidth": 1,
                        "scaleDistribution": {
                            "type": "linear"
                        }
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "decbytes"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 58
            },
            "id": 201,
            "interval": "1m",
            "options": {
                "barRadius": 0,
                "barWidth": 0.97,
                "groupWidth": 0.7,
                "legend": {
                    "calcs": [],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "orientation": "auto",
                "showValue": "auto",
                "stacking": "none",
                "tooltip": {
                    "mode": "multi",
                    "sort": "desc"
                },
                "xField": "Time",
                "xTickLabelMaxLength": 2,
                "xTickLabelRotation": -60,
                "xTickLabelSpacing": 100
            },
            "pluginVersion": "9.0.4",
            "repeatDirection": "h",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"interface_stats\")\n  |> filter(fn: (r) => r[\"traffic_type\"] == \"all_traffic\")\n  |> filter(fn: (r) => r[\"_field\"] == \"bytes_tx\")\n  |> filter(fn: (r) => r[\"interface_label\"] =~ /${wan_labels:regex}/)\n  |> keep(columns: [\"_value\", \"_time\", \"_field\", \"interface_label\"])",
                    "refId": "Data TX"
                }
            ],
            "title": "Outbound Bytes by Label",
            "type": "barchart"
        },
        {
            "collapsed": false,
            "gridPos": {
                "h": 1,
                "w": 24,
                "x": 0,
                "y": 65
            },
            "id": 152,
            "panels": [],
            "title": "LAN Interfaces",
            "type": "row"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "per-LAN interface data transmission",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "Inbound (-)  /  Outbound (+)",
                        "axisPlacement": "auto",
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 30,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 2,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "none"
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "decbits"
                },
                "overrides": [
                    {
                        "matcher": {
                            "id": "byRegexp",
                            "options": "/rx/"
                        },
                        "properties": [
                            {
                                "id": "custom.transform",
                                "value": "negative-Y"
                            }
                        ]
                    },
                    {
                        "matcher": {
                            "id": "byRegexp",
                            "options": "/wan_inbound/"
                        },
                        "properties": [
                            {
                                "id": "custom.transform",
                                "value": "negative-Y"
                            }
                        ]
                    },
                    {
                        "matcher": {
                            "id": "byRegexp",
                            "options": "/deployment/"
                        },
                        "properties": [
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "dark-purple",
                                    "mode": "fixed"
                                }
                            },
                            {
                                "id": "custom.lineStyle",
                                "value": {
                                    "dash": [
                                        10,
                                        10
                                    ],
                                    "fill": "dash"
                                }
                            },
                            {
                                "id": "custom.lineWidth",
                                "value": 2
                            },
                            {
                                "id": "custom.fillOpacity",
                                "value": 0
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 8,
                "w": 24,
                "x": 0,
                "y": 66
            },
            "id": 135,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "multi",
                    "sort": "none"
                }
            },
            "repeat": "lan_interfaces",
            "repeatDirection": "h",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"interface_stats\")\n  |> filter(fn: (r) => r[\"traffic_type\"] == \"all_traffic\")\n  |> filter(fn: (r) => r[\"_field\"] == \"bytes_rx\" or r[\"_field\"] == \"bytes_tx\")\n  |> filter(fn: (r) => r[\"interface_name\"] =~ /^${lan_interfaces}/)\n  |> map(fn: (r) => ({r with _value: r._value / 8}))\n  |> keep(columns: [\"_value\", \"_time\", \"_field\"])",
                    "refId": "Data RX / TX"
                }
            ],
            "title": "${lan_interfaces}",
            "type": "timeseries"
        },
        {
            "collapsed": false,
            "gridPos": {
                "h": 1,
                "w": 24,
                "x": 0,
                "y": 74
            },
            "id": 84,
            "panels": [],
            "title": "Boost",
            "type": "row"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Boost utilization as visualized in Orchestrator of real utilization, configured max on appliance, and secondary axis of time experiencing insufficient Boost ",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 0,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 5,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "none"
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    }
                },
                "overrides": [
                    {
                        "matcher": {
                            "id": "byFrameRefID",
                            "options": "Boost Bytes"
                        },
                        "properties": [
                            {
                                "id": "unit",
                                "value": "bps"
                            }
                        ]
                    },
                    {
                        "matcher": {
                            "id": "byFrameRefID",
                            "options": "Configured Boost"
                        },
                        "properties": [
                            {
                                "id": "unit",
                                "value": "bps"
                            },
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "orange",
                                    "mode": "fixed"
                                }
                            }
                        ]
                    },
                    {
                        "matcher": {
                            "id": "byFrameRefID",
                            "options": "Seconds not Boosted"
                        },
                        "properties": [
                            {
                                "id": "unit",
                                "value": "s"
                            },
                            {
                                "id": "thresholds",
                                "value": {
                                    "mode": "absolute",
                                    "steps": [
                                        {
                                            "color": "blue",
                                            "value": null
                                        },
                                        {
                                            "color": "red",
                                            "value": 1
                                        }
                                    ]
                                }
                            },
                            {
                                "id": "color",
                                "value": {
                                    "mode": "thresholds"
                                }
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 9,
                "w": 16,
                "x": 0,
                "y": 75
            },
            "id": 86,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "multi",
                    "sort": "none"
                }
            },
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"ECTELEM\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")  \n  |> filter(fn: (r) => r[\"_measurement\"] == \"boost_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"boost_bytes\")\n  |> map(fn: (r) => ({r with _value: r._value / 8}))\n  |> keep(columns: [\"_value\", \"_time\", \"_field\"])",
                    "refId": "Boost Bytes"
                },
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"ECTELEM\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")  \n  |> filter(fn: (r) => r[\"_measurement\"] == \"boost_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"boost_configured_kbps\")\n  |> map(fn: (r) => ({r with _value: r._value * 1000}))\n  |> keep(columns: [\"_value\", \"_time\", \"_field\"])",
                    "refId": "Configured Boost"
                },
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"ECTELEM\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")  \n  |> filter(fn: (r) => r[\"_measurement\"] == \"boost_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"seconds_not_boosted_in_minute\")\n  |> keep(columns: [\"_value\", \"_time\", \"_field\"])\n  |> yield(name: \"last\")",
                    "refId": "Seconds not Boosted"
                }
            ],
            "title": "Boost",
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Cumulative Boosted Bytes over time window",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "fixedColor": "blue",
                        "mode": "fixed"
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "decbytes"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 3,
                "w": 4,
                "x": 16,
                "y": 75
            },
            "id": 87,
            "options": {
                "colorMode": "background",
                "graphMode": "none",
                "justifyMode": "auto",
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "textMode": "auto"
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"ECTELEM\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")  \n  |> filter(fn: (r) => r[\"_measurement\"] == \"boost_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"boost_bytes\")\n  |> cumulativeSum()",
                    "refId": "Boost Bytes"
                }
            ],
            "title": "Total Boosted Bytes",
            "type": "stat"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Seconds logged for insufficient Boost",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "thresholds"
                    },
                    "mappings": [],
                    "noValue": "0",
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "s"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 3,
                "w": 4,
                "x": 20,
                "y": 75
            },
            "id": 88,
            "options": {
                "colorMode": "background",
                "graphMode": "none",
                "justifyMode": "auto",
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "textMode": "auto"
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": true,
                    "query": "from(bucket: \"ECTELEM\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")  \n  |> filter(fn: (r) => r[\"_measurement\"] == \"boost_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"seconds_not_boosted_in_minute\")\n  |> cumulativeSum()",
                    "refId": "Boost Bytes"
                }
            ],
            "title": "Time Insufficient Boost",
            "type": "stat"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Peak Boost Utilization within time window",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "continuous-GrYlRd"
                    },
                    "decimals": 2,
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "yellow",
                                "value": 50
                            },
                            {
                                "color": "orange",
                                "value": 75
                            },
                            {
                                "color": "red",
                                "value": 90
                            }
                        ]
                    },
                    "unit": "bps"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 3,
                "w": 4,
                "x": 16,
                "y": 78
            },
            "id": 202,
            "options": {
                "colorMode": "background",
                "graphMode": "none",
                "justifyMode": "auto",
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "textMode": "auto"
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"ECTELEM\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")  \n  |> filter(fn: (r) => r[\"_measurement\"] == \"boost_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"boost_bytes\")\n  |> map(fn: (r) => ({r with _value: r._value / 8}))\n  |> keep(columns: [\"_value\", \"_time\", \"_field\"])\n  |> max()",
                    "refId": "Boost Bytes"
                }
            ],
            "title": "Peak Boost (Actual)",
            "type": "stat"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "continuous-GrYlRd"
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "bps"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 3,
                "w": 4,
                "x": 20,
                "y": 78
            },
            "id": 103,
            "options": {
                "colorMode": "background",
                "graphMode": "area",
                "justifyMode": "auto",
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "textMode": "auto"
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"ECTELEM\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")  \n  |> filter(fn: (r) => r[\"_measurement\"] == \"boost_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"boost_bytes\")\n  |> map(fn: (r) => ({r with _value: r._value / 8}))\n  |> quantile(q: 0.95)",
                    "refId": "Boost Bytes"
                }
            ],
            "title": "95th Percentile (Actual)",
            "type": "stat"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Peak Boost utilization within time period compared to configured maximum Boost value on appliance",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "continuous-GrYlRd"
                    },
                    "decimals": 2,
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "yellow",
                                "value": 50
                            },
                            {
                                "color": "orange",
                                "value": 75
                            },
                            {
                                "color": "red",
                                "value": 90
                            }
                        ]
                    },
                    "unit": "percentunit"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 3,
                "w": 4,
                "x": 16,
                "y": 81
            },
            "id": 225,
            "options": {
                "colorMode": "background",
                "graphMode": "none",
                "justifyMode": "auto",
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "textMode": "auto"
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "bytes = from(bucket: \"ECTELEM\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")  \n  |> filter(fn: (r) => r[\"_measurement\"] == \"boost_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"boost_bytes\")\n  |> map(fn: (r) => ({r with _value: r._value / 8}))\n  |> keep(columns: [\"_value\", \"_time\", \"_field\"])\n\nconfigured = from(bucket: \"ECTELEM\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")  \n  |> filter(fn: (r) => r[\"_measurement\"] == \"boost_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"boost_configured_kbps\")\n  |> map(fn: (r) => ({r with _value: r._value * 1000}))\n  |> keep(columns: [\"_value\", \"_time\", \"_field\"])\n\n\n// Calculate Utilization of Boost\njoin(tables:{bytes:bytes, configured:configured}, on:[\"_time\"])\n  |> map(fn:(r) => ({\n    \"Utilization\": float(v: r._value_bytes) / float(v: r._value_configured) }))\n  |> max(column: \"Utilization\")",
                    "refId": "Boost Bytes"
                }
            ],
            "title": "Peak Boost (% Configured)",
            "type": "stat"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "95th Percentile Boost utilization within time period compared to configured maximum Boost value on appliance",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "continuous-GrYlRd"
                    },
                    "decimals": 2,
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "yellow",
                                "value": 30
                            },
                            {
                                "color": "orange",
                                "value": 45
                            },
                            {
                                "color": "red",
                                "value": 60
                            }
                        ]
                    },
                    "unit": "percentunit"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 3,
                "w": 4,
                "x": 20,
                "y": 81
            },
            "id": 203,
            "options": {
                "colorMode": "background",
                "graphMode": "none",
                "justifyMode": "auto",
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "textMode": "auto"
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "bytes = from(bucket: \"ECTELEM\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")  \n  |> filter(fn: (r) => r[\"_measurement\"] == \"boost_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"boost_bytes\")\n  |> map(fn: (r) => ({r with _value: r._value / 8}))\n  |> keep(columns: [\"_value\", \"_time\", \"_field\"])\n\nconfigured = from(bucket: \"ECTELEM\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")  \n  |> filter(fn: (r) => r[\"_measurement\"] == \"boost_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"boost_configured_kbps\")\n  |> map(fn: (r) => ({r with _value: r._value * 1000}))\n  |> keep(columns: [\"_value\", \"_time\", \"_field\"])\n\n\n// Calculate Utilization of Boost\njoin(tables:{bytes:bytes, configured:configured}, on:[\"_time\"])\n  |> map(fn:(r) => ({\n    \"Utilization\": float(v: r._value_bytes) / float(v: r._value_configured) }))\n  |> quantile(column: \"Utilization\", q:0.95)\n  |> yield(name: \"Max Boost\")",
                    "refId": "Boost Bytes"
                }
            ],
            "title": "95th Percentile (% Configured)",
            "type": "stat"
        },
        {
            "collapsed": false,
            "gridPos": {
                "h": 1,
                "w": 24,
                "x": 0,
                "y": 84
            },
            "id": 270,
            "panels": [],
            "title": "Overlays",
            "type": "row"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Cumulative Inbound Bytes per Business Intent Overlay for current time period ",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        }
                    },
                    "mappings": [],
                    "unit": "decbytes"
                },
                "overrides": [
                    {
                        "matcher": {
                            "id": "byFrameRefID",
                            "options": "Down Tunnels"
                        },
                        "properties": [
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "dark-red",
                                    "mode": "fixed"
                                }
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 13,
                "w": 12,
                "x": 0,
                "y": 85
            },
            "id": 236,
            "interval": "1m",
            "options": {
                "displayLabels": [
                    "value",
                    "name"
                ],
                "legend": {
                    "displayMode": "table",
                    "placement": "right",
                    "showLegend": true,
                    "values": [
                        "value"
                    ]
                },
                "pieType": "pie",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "tooltip": {
                    "mode": "single",
                    "sort": "none"
                }
            },
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"interface_overlay_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"bytes_rx\")\n  |> group(columns: [\"_measurement\", \"_field\", \"overlay\"])\n  |> cumulativeSum()\n  |> map(fn: (r) => ({_value:r._value,_time:r._time, overlay:r.overlay}))\n  |> yield(name: \"last\")",
                    "refId": "Overlay Inbound"
                }
            ],
            "title": "Overlay Distribution Inbound",
            "type": "piechart"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Cumulative Outbound Bytes per Business Intent Overlay for current time period ",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        }
                    },
                    "mappings": [],
                    "unit": "decbytes"
                },
                "overrides": [
                    {
                        "matcher": {
                            "id": "byFrameRefID",
                            "options": "Down Tunnels"
                        },
                        "properties": [
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "dark-red",
                                    "mode": "fixed"
                                }
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 13,
                "w": 12,
                "x": 12,
                "y": 85
            },
            "id": 258,
            "interval": "1m",
            "options": {
                "displayLabels": [
                    "value"
                ],
                "legend": {
                    "displayMode": "table",
                    "placement": "right",
                    "showLegend": true,
                    "values": [
                        "value"
                    ]
                },
                "pieType": "pie",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "tooltip": {
                    "mode": "single",
                    "sort": "none"
                }
            },
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"interface_overlay_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"bytes_tx\")\n  |> group(columns: [\"_measurement\", \"_field\", \"overlay\"])\n  |> cumulativeSum()\n  |> map(fn: (r) => ({_value:r._value,_time:r._time, overlay:r.overlay}))\n  |> yield(name: \"last\")",
                    "refId": "Overlay Inbound"
                }
            ],
            "title": "Overlay Distribution Outbound",
            "type": "piechart"
        },
        {
            "collapsed": false,
            "gridPos": {
                "h": 1,
                "w": 24,
                "x": 0,
                "y": 98
            },
            "id": 26,
            "panels": [],
            "title": "Tunnels General",
            "type": "row"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Stacked sum of tunnels (by type) on appliance. \"Configured Tunnels\" would be the expected total number of active tunnels on an appliance based on state of Business Intent Overlays configuration as well as WAN labels on appliance",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 100,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineStyle": {
                            "fill": "solid"
                        },
                        "lineWidth": 0,
                        "pointSize": 1,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "normal"
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    }
                },
                "overrides": [
                    {
                        "matcher": {
                            "id": "byFrameRefID",
                            "options": "Configured Tunnels"
                        },
                        "properties": [
                            {
                                "id": "custom.fillOpacity",
                                "value": 8
                            },
                            {
                                "id": "custom.stacking",
                                "value": {
                                    "group": "",
                                    "mode": "none"
                                }
                            },
                            {
                                "id": "custom.lineWidth",
                                "value": 2
                            },
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "dark-purple",
                                    "mode": "fixed"
                                }
                            },
                            {
                                "id": "displayName",
                                "value": "Configured Tunnels"
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 8,
                "w": 14,
                "x": 0,
                "y": 99
            },
            "id": 32,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "multi",
                    "sort": "desc"
                }
            },
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_count_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"up_overlay_sdwan_tunnels\" or r[\"_field\"] == \"up_third_party_tunnels\" or r[\"_field\"] == \"up_underlay_sdwan_tunnels\")\n  |> keep(columns: [\"_value\", \"_time\", \"_field\"])\n  |> yield(name: \"last\")",
                    "refId": "Up Tunnels"
                },
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_count_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"overlay_sdwan_tunnels\" or r[\"_field\"] == \"third_party_tunnels\" or r[\"_field\"] == \"underlay_sdwan_tunnels\")\n  |> group(columns: [\"_time\"], mode:\"by\")\n  |> sum(column: \"_value\")\n  |> group()\n  |> keep(columns: [\"_value\", \"_time\", \"_field\"])",
                    "refId": "Configured Tunnels"
                }
            ],
            "title": "Tunnel Counts",
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Current counts of tunnels (by type) on appliance. \"Configured Tunnels\" would be the expected total number of active tunnels on an appliance based on state of Business Intent Overlays configuration as well as WAN labels on appliance",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        }
                    },
                    "mappings": []
                },
                "overrides": [
                    {
                        "matcher": {
                            "id": "byFrameRefID",
                            "options": "Down Tunnels"
                        },
                        "properties": [
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "dark-red",
                                    "mode": "fixed"
                                }
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 8,
                "w": 5,
                "x": 14,
                "y": 99
            },
            "id": 34,
            "options": {
                "displayLabels": [
                    "value"
                ],
                "legend": {
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true,
                    "values": []
                },
                "pieType": "pie",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "tooltip": {
                    "mode": "single",
                    "sort": "none"
                }
            },
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_count_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"up_overlay_sdwan_tunnels\" or r[\"_field\"] == \"up_third_party_tunnels\" or r[\"_field\"] == \"up_underlay_sdwan_tunnels\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> keep(columns: [\"_value\", \"_time\", \"_field\"])\n  |> yield(name: \"last\")",
                    "refId": "Up Tunnels"
                },
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_count_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"down_overlay_sdwan_tunnels\" or r[\"_field\"] == \"down_third_party_tunnels\" or r[\"_field\"] == \"down_underlay_sdwan_tunnels\")\n  |> group(columns: [\"_time\"], mode:\"by\")\n  |> sum(column: \"_value\")\n  |> group()\n  |> rename(columns: {_value:\"Down Tunnels\"})\n  |> yield()",
                    "refId": "Down Tunnels"
                }
            ],
            "title": "Tunnel Count Distribution",
            "type": "piechart"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "thresholds"
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "yellow",
                                "value": 4000
                            },
                            {
                                "color": "orange",
                                "value": 5000
                            },
                            {
                                "color": "red",
                                "value": 8000
                            }
                        ]
                    }
                },
                "overrides": [
                    {
                        "matcher": {
                            "id": "byFrameRefID",
                            "options": "SumDownTunnels"
                        },
                        "properties": [
                            {
                                "id": "thresholds",
                                "value": {
                                    "mode": "absolute",
                                    "steps": [
                                        {
                                            "color": "green",
                                            "value": null
                                        },
                                        {
                                            "color": "dark-red",
                                            "value": 1
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 8,
                "w": 5,
                "x": 19,
                "y": 99
            },
            "id": 107,
            "options": {
                "colorMode": "background",
                "graphMode": "none",
                "justifyMode": "auto",
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "textMode": "auto"
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_count_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"up_overlay_sdwan_tunnels\" or r[\"_field\"] == \"up_third_party_tunnels\" or r[\"_field\"] == \"up_underlay_sdwan_tunnels\")\n  |> group(columns: [\"_time\"], mode:\"by\")\n  |> sum(column: \"_value\")\n  |> group()\n  |> rename(columns: {_value:\"Up Tunnels\"})\n  |> yield()",
                    "refId": "SumUpTunnels"
                },
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_count_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"down_overlay_sdwan_tunnels\" or r[\"_field\"] == \"down_third_party_tunnels\" or r[\"_field\"] == \"down_underlay_sdwan_tunnels\")\n//group by time to isolate the values you want to sum togehter\n  |> group(columns: [\"_time\"], mode:\"by\")\n  |> sum(column: \"_value\")\n//to ungroup your data provide a group without any columns\n  |> group()\n  |> rename(columns: {_value:\"Down Tunnels\"})\n  |> yield()",
                    "refId": "SumDownTunnels"
                }
            ],
            "title": "Tunnel Counts",
            "type": "stat"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Alias names of Overlay tunnels in a down state, click inspect to see full list of tunnel names. If tunnel count is too long there is likely a larger issue at hand. Overlay tunnels often consist of multiple underlay tunnels and as such would be the most critical impact as it would prohibit connectivity between sites.",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "fixedColor": "dark-red",
                        "mode": "fixed"
                    },
                    "custom": {
                        "align": "auto",
                        "displayMode": "color-background",
                        "inspect": true
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 1
                            }
                        ]
                    }
                },
                "overrides": []
            },
            "gridPos": {
                "h": 3,
                "w": 8,
                "x": 0,
                "y": 107
            },
            "id": 281,
            "options": {
                "footer": {
                    "fields": "",
                    "reducer": [
                        "sum"
                    ],
                    "show": false
                },
                "frameIndex": 1,
                "showHeader": false
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_count_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"overlay_down_tunnels\")\n  |> last()\n  |> keep(columns: [\"_value\"])\n  |> yield()",
                    "refId": "SumDownTunnels"
                }
            ],
            "title": "Down Overlay Tunnels",
            "type": "table"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Alias names of Underlay tunnels in a down state, click inspect to see full list of tunnel names. If tunnel count is too long there is likely a larger issue at hand",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "fixedColor": "dark-red",
                        "mode": "fixed"
                    },
                    "custom": {
                        "align": "auto",
                        "displayMode": "color-background",
                        "inspect": true
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 1
                            }
                        ]
                    }
                },
                "overrides": []
            },
            "gridPos": {
                "h": 3,
                "w": 8,
                "x": 8,
                "y": 107
            },
            "id": 205,
            "options": {
                "footer": {
                    "fields": "",
                    "reducer": [
                        "sum"
                    ],
                    "show": false
                },
                "frameIndex": 1,
                "showHeader": false
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_count_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"underlay_down_tunnels\")\n  |> last()\n  |> keep(columns: [\"_value\"])\n  |> yield()",
                    "refId": "SumDownTunnels"
                }
            ],
            "title": "Down Underlay Tunnels",
            "type": "table"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Alias names of Third Party tunnels in a down state, click inspect to see full list of tunnel names. If tunnel count is too long there is likely a larger issue at hand on the WAN labels in use to get to the third parties, or the third party experiencing an issue itself",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "fixedColor": "dark-red",
                        "mode": "fixed"
                    },
                    "custom": {
                        "align": "auto",
                        "displayMode": "color-background",
                        "inspect": true
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 1
                            }
                        ]
                    }
                },
                "overrides": []
            },
            "gridPos": {
                "h": 3,
                "w": 8,
                "x": 16,
                "y": 107
            },
            "id": 282,
            "options": {
                "footer": {
                    "fields": "",
                    "reducer": [
                        "sum"
                    ],
                    "show": false
                },
                "frameIndex": 1,
                "showHeader": false
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "hide": false,
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_count_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"third_party_down_tunnels\")\n  |> last()\n  |> keep(columns: [\"_value\"])\n  |> yield()",
                    "refId": "SumDownTunnels"
                }
            ],
            "title": "Down Third Party Tunnels",
            "type": "table"
        },
        {
            "collapsed": false,
            "gridPos": {
                "h": 1,
                "w": 24,
                "x": 0,
                "y": 110
            },
            "id": 46,
            "panels": [],
            "title": "Overlay Tunnels - Loss, Jitter, MOS",
            "type": "row"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Compare Packet Loss PRE Forward Error Correction on all overlay tunnels",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "axisSoftMax": 5,
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 0,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 5,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "none"
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "percent"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 8,
                "w": 8,
                "x": 0,
                "y": 111
            },
            "id": 28,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "single",
                    "sort": "none"
                }
            },
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Loss_Pct_pre-FEC\") // and r._value > 0)\n  |> filter(fn: (r) => r[\"overlay\"] != \"underlay\" and r[\"tunnel_alias\"] !~ /Passthrough_/)\n  // Raw data is % * 100, e.g. 0.84% is stored as 84\n  |> map(fn: (r) => ({r with _value: r._value / 100}))\n  |> keep(columns: [\"_value\", \"_time\", \"tunnel_alias\"])\n  \n  ",
                    "refId": "Loss Pre FEC"
                }
            ],
            "title": "Overlay Loss % - Pre-FEC",
            "transformations": [],
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Compare Packet Loss PRE Packet Order Correction on all overlay tunnels",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "axisSoftMax": 5,
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 0,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 5,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "none"
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "percent"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 8,
                "w": 8,
                "x": 8,
                "y": 111
            },
            "id": 57,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "single",
                    "sort": "none"
                }
            },
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Out_of_Order_Pct_pre-POC\") // and r._value > 0)\n  |> filter(fn: (r) => r[\"overlay\"] != \"underlay\" and r[\"tunnel_alias\"] !~ /Passthrough_/)\n  // Raw data is % * 100, e.g. 0.84% is stored as 84\n  |> map(fn: (r) => ({r with _value: r._value / 100}))\n  |> keep(columns: [\"_value\", \"_time\", \"tunnel_alias\"])",
                    "refId": "OOO Pre POC"
                }
            ],
            "title": "Overlay Out of Order Packet % - Pre-POC",
            "transformations": [],
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Compare MOS Scores PRE Forward Error Correction on all overlay tunnels",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "axisSoftMax": 5,
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 0,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 5,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "none"
                        },
                        "thresholdsStyle": {
                            "mode": "area"
                        }
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "dark-red",
                                "value": null
                            },
                            {
                                "color": "orange",
                                "value": 3
                            },
                            {
                                "color": "yellow",
                                "value": 3.5
                            },
                            {
                                "color": "light-green",
                                "value": 4
                            },
                            {
                                "color": "dark-green",
                                "value": 5
                            }
                        ]
                    },
                    "unit": "none"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 8,
                "w": 8,
                "x": 16,
                "y": 111
            },
            "id": 59,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "single",
                    "sort": "none"
                }
            },
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Pre_FEC_MOS_Score_(*100)\")\n  |> filter(fn: (r) => r[\"overlay\"] != \"underlay\" and r[\"tunnel_alias\"] !~ /Passthrough_/)\n  // Raw data is MOS * 100, e.g. 4 is stored as 400, similar to other percent values\n  |> map(fn: (r) => ({r with _value: r._value / 100}))\n  |> keep(columns: [\"_value\", \"_time\", \"tunnel_alias\"])",
                    "refId": "MOS Pre FEC"
                }
            ],
            "title": "Overlay MOS - Pre-FEC",
            "transformations": [],
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Compare Packet Loss POST Forward Error Correction on all overlay tunnels. Amount of FEC to correct against underlying brown-out / black-out transports will vary based on configuration of Bonding Policy per Business Intent Overlay",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "axisSoftMax": 5,
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 0,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 5,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "none"
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "percent"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 8,
                "w": 8,
                "x": 0,
                "y": 119
            },
            "id": 29,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "single",
                    "sort": "none"
                }
            },
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Loss_Pct_post-FEC\")\n  |> filter(fn: (r) => r[\"overlay\"] != \"underlay\" and r[\"tunnel_alias\"] !~ /Passthrough_/)\n  // Raw data is % * 100, e.g. 0.84% is stored as 84\n  |> map(fn: (r) => ({r with _value: r._value / 100}))\n  |> keep(columns: [\"_value\", \"_time\", \"tunnel_alias\"])",
                    "refId": "Loss Post FEC"
                }
            ],
            "title": "Overlay Loss % - Post-FEC",
            "transformations": [],
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Compare Packet Loss POST Packet Order Correction on all overlay tunnels",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "axisSoftMax": 5,
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 0,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 5,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "none"
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "percent"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 8,
                "w": 8,
                "x": 8,
                "y": 119
            },
            "id": 58,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "single",
                    "sort": "none"
                }
            },
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Out_of_Order_Pct_post-POC\") // and r._value > 0))\n  |> filter(fn: (r) => r[\"overlay\"] != \"underlay\" and r[\"tunnel_alias\"] !~ /Passthrough_/)\n  // Raw data is % * 100, e.g. 0.84% is stored as 84\n  |> map(fn: (r) => ({r with _value: r._value / 100}))\n  |> keep(columns: [\"_value\", \"_time\", \"tunnel_alias\"])",
                    "refId": "OOO Post POC"
                }
            ],
            "title": "Overlay Out of Order Packet % - Post-POC",
            "transformations": [],
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Compare MOS Scores POST Forward Error Correction on all overlay tunnels. Amount of FEC to correct against underlying brown-out / black-out transports will vary based on configuration of Bonding Policy per Business Intent Overlay",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "axisSoftMax": 5,
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 0,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 5,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "none"
                        },
                        "thresholdsStyle": {
                            "mode": "area"
                        }
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "dark-red",
                                "value": null
                            },
                            {
                                "color": "orange",
                                "value": 3
                            },
                            {
                                "color": "yellow",
                                "value": 3.5
                            },
                            {
                                "color": "light-green",
                                "value": 4
                            },
                            {
                                "color": "dark-green",
                                "value": 5
                            }
                        ]
                    },
                    "unit": "none"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 8,
                "w": 8,
                "x": 16,
                "y": 119
            },
            "id": 61,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "single",
                    "sort": "none"
                }
            },
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Post_FEC_MOS_Score_(*100)\")\n  |> filter(fn: (r) => r[\"overlay\"] != \"underlay\" and r[\"tunnel_alias\"] !~ /Passthrough_/)\n  // Raw data is MOS * 100, e.g. 4 is stored as 400, similar to other percent values\n  |> map(fn: (r) => ({r with _value: r._value / 100}))\n  |> keep(columns: [\"_value\", \"_time\", \"tunnel_alias\"])",
                    "refId": "MOS Post FEC"
                }
            ],
            "title": "Overlay MOS - Post-FEC",
            "transformations": [],
            "type": "timeseries"
        },
        {
            "collapsed": false,
            "gridPos": {
                "h": 1,
                "w": 24,
                "x": 0,
                "y": 127
            },
            "id": 53,
            "panels": [],
            "title": "Tunnel Analysis $tunnel_analysis_peer",
            "type": "row"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Bytes transported over specific tunnel chosen in dashboard variable",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "axisCenteredZero": true,
                        "axisColorMode": "text",
                        "axisLabel": "Inbound (-)  /  Outbound (+)",
                        "axisPlacement": "auto",
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 30,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 2,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "none"
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "decbits"
                },
                "overrides": [
                    {
                        "matcher": {
                            "id": "byRegexp",
                            "options": "/rx/"
                        },
                        "properties": [
                            {
                                "id": "custom.transform",
                                "value": "negative-Y"
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 7,
                "w": 9,
                "x": 0,
                "y": 128
            },
            "id": 76,
            "interval": "1m",
            "links": [],
            "options": {
                "legend": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "multi",
                    "sort": "none"
                }
            },
            "repeatDirection": "h",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"bytes_wan_rx\" or r[\"_field\"] == \"bytes_wan_tx\")\n  |> filter(fn: (r) => r[\"tunnel_alias\"] == \"${tunnel_analysis_peer}\")\n  |> map(fn: (r) => ({r with _value: r._value / 8}))",
                    "refId": "Data RX / TX"
                }
            ],
            "title": "Tunnel WAN Bytes",
            "transformations": [
                {
                    "id": "renameByRegex",
                    "options": {
                        "regex": "(bytes_wan_rx)(.*)",
                        "renamePattern": "$1"
                    }
                },
                {
                    "id": "renameByRegex",
                    "options": {
                        "regex": "(bytes_wan_tx)(.*)",
                        "renamePattern": "$1"
                    }
                }
            ],
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Cumulative Bytes transported over specific tunnel chosen in dashboard variable",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "decbits"
                },
                "overrides": [
                    {
                        "matcher": {
                            "id": "byRegexp",
                            "options": "bytes_wan_tx.*"
                        },
                        "properties": [
                            {
                                "id": "displayName",
                                "value": "Outbound"
                            }
                        ]
                    },
                    {
                        "matcher": {
                            "id": "byRegexp",
                            "options": "bytes_wan_rx.*"
                        },
                        "properties": [
                            {
                                "id": "displayName",
                                "value": "Inbound"
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 7,
                "w": 3,
                "x": 9,
                "y": 128
            },
            "id": 79,
            "options": {
                "colorMode": "background",
                "graphMode": "none",
                "justifyMode": "auto",
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "textMode": "auto"
            },
            "pluginVersion": "9.1.6",
            "repeatDirection": "h",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"bytes_wan_rx\" or r[\"_field\"] == \"bytes_wan_tx\")\n  |> filter(fn: (r) => r[\"tunnel_alias\"] == \"${tunnel_analysis_peer}\")\n  |> map(fn: (r) => ({r with _value: r._value / 8}))\n  |> cumulativeSum()\n  |> keep(columns: [\"_value\", \"_time\", \"_field\"])",
                    "refId": "Data RX / TX"
                }
            ],
            "title": "Cumulative Tunnel Bytes",
            "type": "stat"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Bytes transported over specific tunnel chosen in dashboard variable",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 30,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 2,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "normal"
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "none"
                },
                "overrides": [
                    {
                        "matcher": {
                            "id": "byName",
                            "options": "TCP Flows"
                        },
                        "properties": [
                            {
                                "id": "displayName",
                                "value": "TCP Flows"
                            },
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "green",
                                    "mode": "fixed"
                                }
                            }
                        ]
                    },
                    {
                        "matcher": {
                            "id": "byName",
                            "options": "non-TCP Flows"
                        },
                        "properties": [
                            {
                                "id": "displayName",
                                "value": "non-TCP Flows"
                            },
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "yellow",
                                    "mode": "fixed"
                                }
                            }
                        ]
                    },
                    {
                        "matcher": {
                            "id": "byName",
                            "options": "Total Flows"
                        },
                        "properties": [
                            {
                                "id": "custom.fillOpacity",
                                "value": 0
                            },
                            {
                                "id": "custom.lineWidth",
                                "value": 0
                            },
                            {
                                "id": "custom.showPoints",
                                "value": "never"
                            },
                            {
                                "id": "custom.stacking",
                                "value": {
                                    "group": "A",
                                    "mode": "none"
                                }
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 7,
                "w": 9,
                "x": 12,
                "y": 128
            },
            "id": 311,
            "interval": "1m",
            "links": [],
            "options": {
                "legend": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "multi",
                    "sort": "none"
                }
            },
            "repeatDirection": "h",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"TCP_flow_count\")\n  |> filter(fn: (r) => r[\"tunnel_alias\"] == \"${tunnel_analysis_peer}\")\n  |> rename(columns: {\"_value\":\"TCP Flows\"})\n  |> yield(name: \"TCP\")\n\nfrom(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"non-TCP_flow_count\")\n  |> filter(fn: (r) => r[\"tunnel_alias\"] == \"${tunnel_analysis_peer}\")\n  |> rename(columns: {\"_value\":\"non-TCP Flows\"})\n  |> yield(name: \"non-TCP\")",
                    "refId": "Tunnel Flows"
                }
            ],
            "title": "Tunnel Flows",
            "transformations": [
                {
                    "id": "calculateField",
                    "options": {
                        "alias": "Total Flows",
                        "mode": "reduceRow",
                        "reduce": {
                            "reducer": "sum"
                        }
                    }
                }
            ],
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Cumulative Bytes transported over specific tunnel chosen in dashboard variable",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "none"
                },
                "overrides": [
                    {
                        "matcher": {
                            "id": "byName",
                            "options": "TCP Flows"
                        },
                        "properties": [
                            {
                                "id": "displayName",
                                "value": "TCP Flows"
                            },
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "green",
                                    "mode": "fixed"
                                }
                            }
                        ]
                    },
                    {
                        "matcher": {
                            "id": "byName",
                            "options": "non-TCP Flows"
                        },
                        "properties": [
                            {
                                "id": "displayName",
                                "value": "non-TCP Flows"
                            },
                            {
                                "id": "color",
                                "value": {
                                    "fixedColor": "yellow",
                                    "mode": "fixed"
                                }
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 7,
                "w": 3,
                "x": 21,
                "y": 128
            },
            "id": 328,
            "options": {
                "colorMode": "background",
                "graphMode": "none",
                "justifyMode": "auto",
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "textMode": "auto"
            },
            "pluginVersion": "9.1.6",
            "repeatDirection": "h",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"TCP_flow_count\")\n  |> filter(fn: (r) => r[\"tunnel_alias\"] == \"${tunnel_analysis_peer}\")\n  |> rename(columns: {\"_value\":\"TCP Flows\"})\n  |> yield(name: \"TCP\")\n\nfrom(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"non-TCP_flow_count\")\n  |> filter(fn: (r) => r[\"tunnel_alias\"] == \"${tunnel_analysis_peer}\")\n  |> rename(columns: {\"_value\":\"non-TCP Flows\"})\n  |> yield(name: \"non-TCP\")",
                    "refId": "Data RX / TX"
                }
            ],
            "title": "Current Flows",
            "type": "stat"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Jitter on tunnel over time, moving average to compare against as baseline calculated every minute with a period based on dashboard variable of \"Moving Average Period\"",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "thresholds"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 0,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 5,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "none"
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "mappings": [],
                    "min": 0,
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "green",
                                "value": 10
                            },
                            {
                                "color": "yellow",
                                "value": 20
                            },
                            {
                                "color": "orange",
                                "value": 30
                            },
                            {
                                "color": "red",
                                "value": 40
                            }
                        ]
                    },
                    "unit": "ms"
                },
                "overrides": [
                    {
                        "matcher": {
                            "id": "byName",
                            "options": "Moving Average"
                        },
                        "properties": [
                            {
                                "id": "color",
                                "value": {
                                    "mode": "fixed"
                                }
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 7,
                "w": 9,
                "x": 0,
                "y": 135
            },
            "id": 75,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "multi",
                    "sort": "desc"
                }
            },
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "current_jitter = from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Jitter_(ms)\")\n  |> filter(fn: (r) => r[\"tunnel_alias\"] == \"${tunnel_analysis_peer}\")\n  |> keep(columns: [\"_value\", \"_time\"])\n  |> rename(columns: {\"_value\":\"Actual\"})\n  |> yield(name: \"current\")\n\nma_jitter = from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_stats\")\n    |> filter(fn: (r) => r[\"_field\"] == \"Jitter_(ms)\")\n  |> filter(fn: (r) => r[\"tunnel_alias\"] == \"${tunnel_analysis_peer}\")\n  |> timedMovingAverage(every: 1m, period: ${baseline_period})\n  |> keep(columns: [\"_value\", \"_time\"])\n  |> rename(columns: {\"_value\":\"Moving Average\"})\n  |> yield(\"name\": \"moving_average\")",
                    "refId": "Jitter"
                }
            ],
            "title": "Tunnel Jitter",
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "thresholds"
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "ms"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 7,
                "w": 3,
                "x": 9,
                "y": 135
            },
            "id": 78,
            "options": {
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "showThresholdLabels": false,
                "showThresholdMarkers": true
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Jitter_(ms)\")\n  |> filter(fn: (r) => r[\"tunnel_alias\"] == \"${tunnel_analysis_peer}\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")",
                    "refId": "A"
                }
            ],
            "title": "Current Tunnel Jitter",
            "type": "gauge"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "thresholds"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "axisSoftMax": 10,
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 0,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 5,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "none"
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "mappings": [],
                    "min": 0,
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "yellow",
                                "value": 1
                            },
                            {
                                "color": "orange",
                                "value": 3
                            },
                            {
                                "color": "red",
                                "value": 5
                            }
                        ]
                    },
                    "unit": "percent"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 7,
                "w": 9,
                "x": 12,
                "y": 135
            },
            "id": 73,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "multi",
                    "sort": "none"
                }
            },
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Out_of_Order_Pct_pre-POC\" or r[\"_field\"] == \"Out_of_Order_Pct_post-POC\")\n  |> filter(fn: (r) => r[\"tunnel_alias\"] == \"${tunnel_analysis_peer}\")\n  // Raw data is % * 100, e.g. 0.84% is stored as 84\n  |> map(fn: (r) => ({r with _value: r._value / 100}))\n  |> keep(columns: [\"_value\", \"_time\", \"_field\"])",
                    "refId": "POC"
                }
            ],
            "title": "Tunnel Out of Order % - Pre-POC vs Post-POC",
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "thresholds"
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "percent"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 7,
                "w": 3,
                "x": 21,
                "y": 135
            },
            "id": 81,
            "options": {
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "showThresholdLabels": false,
                "showThresholdMarkers": true
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Out_of_Order_Pct_post-POC\")\n  |> filter(fn: (r) => r[\"tunnel_alias\"] == \"${tunnel_analysis_peer}\")\n  // Raw data is % * 100, e.g. 0.84% is stored as 84\n  |> map(fn: (r) => ({r with _value: r._value / 100}))",
                    "refId": "A"
                }
            ],
            "title": "Current OOO Post-POC",
            "type": "gauge"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "Latency on tunnel over time, moving average to compare against as baseline calculated every minute with a period based on dashboard variable of \"Moving Average Period\"",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "thresholds"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "axisSoftMax": 150,
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 0,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 5,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "none"
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "mappings": [],
                    "min": 0,
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "green",
                                "value": 50
                            },
                            {
                                "color": "yellow",
                                "value": 100
                            },
                            {
                                "color": "orange",
                                "value": 150
                            },
                            {
                                "color": "red",
                                "value": 200
                            }
                        ]
                    },
                    "unit": "ms"
                },
                "overrides": [
                    {
                        "matcher": {
                            "id": "byName",
                            "options": "Moving Average"
                        },
                        "properties": [
                            {
                                "id": "color",
                                "value": {
                                    "mode": "fixed"
                                }
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 7,
                "w": 9,
                "x": 0,
                "y": 142
            },
            "id": 77,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "multi",
                    "sort": "desc"
                }
            },
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "current_latency = from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"minute_latency\")\n  |> filter(fn: (r) => r[\"tunnel_alias\"] == \"${tunnel_analysis_peer}\")\n  |> keep(columns: [\"_value\", \"_time\"])\n  |> rename(columns: {\"_value\":\"Actual\"})\n  |> yield(name: \"current\")\n\nma_latency = from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"minute_latency\")\n  |> filter(fn: (r) => r[\"tunnel_alias\"] == \"${tunnel_analysis_peer}\")\n  |> timedMovingAverage(every: 1m, period: ${baseline_period})\n  |> keep(columns: [\"_value\", \"_time\"])\n  |> rename(columns: {\"_value\":\"Moving Average\"})\n  |> yield(\"name\": \"moving_average\")",
                    "refId": "Latency"
                }
            ],
            "title": "Tunnel Latency",
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "thresholds"
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "ms"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 7,
                "w": 3,
                "x": 9,
                "y": 142
            },
            "id": 80,
            "options": {
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "showThresholdLabels": false,
                "showThresholdMarkers": true
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"minute_latency\")\n  |> filter(fn: (r) => r[\"tunnel_alias\"] == \"${tunnel_analysis_peer}\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")",
                    "refId": "A"
                }
            ],
            "title": "Current Tunnel Latency",
            "type": "gauge"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "thresholds"
                    },
                    "custom": {
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "axisSoftMax": 10,
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 0,
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": false,
                            "tooltip": false,
                            "viz": false
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 5,
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                            "group": "A",
                            "mode": "none"
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "mappings": [],
                    "min": 0,
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "yellow",
                                "value": 1
                            },
                            {
                                "color": "orange",
                                "value": 3
                            },
                            {
                                "color": "red",
                                "value": 5
                            }
                        ]
                    },
                    "unit": "percent"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 7,
                "w": 9,
                "x": 12,
                "y": 142
            },
            "id": 74,
            "interval": "1m",
            "options": {
                "legend": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": true
                },
                "tooltip": {
                    "mode": "multi",
                    "sort": "none"
                }
            },
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Loss_Pct_pre-FEC\" or r[\"_field\"] == \"Loss_Pct_post-FEC\")\n  |> filter(fn: (r) => r[\"tunnel_alias\"] == \"${tunnel_analysis_peer}\")\n  // Raw data is % * 100, e.g. 0.84% is stored as 84\n  |> map(fn: (r) => ({r with _value: r._value / 100}))\n  |> keep(columns: [\"_value\", \"_time\", \"_field\"])",
                    "refId": "Loss"
                }
            ],
            "title": "Tunnel Loss % - Pre-FEC vs Post-FEC",
            "type": "timeseries"
        },
        {
            "datasource": {
                "type": "influxdb",
                "uid": "ec_telem_influx"
            },
            "description": "",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "thresholds"
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            },
                            {
                                "color": "red",
                                "value": 80
                            }
                        ]
                    },
                    "unit": "percent"
                },
                "overrides": []
            },
            "gridPos": {
                "h": 7,
                "w": 3,
                "x": 21,
                "y": 142
            },
            "id": 82,
            "options": {
                "orientation": "auto",
                "reduceOptions": {
                    "calcs": [
                        "lastNotNull"
                    ],
                    "fields": "",
                    "values": false
                },
                "showThresholdLabels": false,
                "showThresholdMarkers": true
            },
            "pluginVersion": "9.1.6",
            "targets": [
                {
                    "datasource": {
                        "type": "influxdb",
                        "uid": "ec_telem_influx"
                    },
                    "query": "from(bucket: \"${db_bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"hostname\"] == \"${ec_hostname}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"tunnel_stats\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Loss_Pct_post-FEC\")\n  |> filter(fn: (r) => r[\"tunnel_alias\"] == \"${tunnel_analysis_peer}\")\n  // Raw data is % * 100, e.g. 0.84% is stored as 84\n  |> map(fn: (r) => ({r with _value: r._value / 100}))",
                    "refId": "A"
                }
            ],
            "title": "Current Loss Post-FEC",
            "type": "gauge"
        }
    ],
    "refresh": "1m",
    "schemaVersion": 37,
    "style": "dark",
    "tags": [],
    "templating": {
        "list": [
            {
                "current": {
                    "selected": false,
                    "text": "ECTELEM",
                    "value": "ECTELEM"
                },
                "datasource": {
                    "type": "influxdb",
                    "uid": "ec_telem_influx"
                },
                "definition": "buckets() ",
                "hide": 0,
                "includeAll": false,
                "label": "Database Bucket",
                "multi": false,
                "name": "db_bucket",
                "options": [],
                "query": "buckets() ",
                "refresh": 1,
                "regex": "",
                "skipUrlSync": false,
                "sort": 0,
                "type": "query"
            },
            {
                "current": {
                    "selected": true,
                    "text": "Kennesaw6-Powers",
                    "value": "Kennesaw6-Powers"
                },
                "datasource": {
                    "type": "influxdb",
                    "uid": "ec_telem_influx"
                },
                "definition": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: \"${db_bucket}\",\n    tag: \"hostname\",\n    predicate: (r) => true,\n)",
                "description": "Hostname of EdgeConnect",
                "hide": 0,
                "includeAll": false,
                "label": "Appliance",
                "multi": false,
                "name": "ec_hostname",
                "options": [],
                "query": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: \"${db_bucket}\",\n    tag: \"hostname\",\n    predicate: (r) => true,\n)",
                "refresh": 1,
                "regex": "",
                "skipUrlSync": false,
                "sort": 0,
                "type": "query"
            },
            {
                "current": {
                    "selected": true,
                    "text": "to_INDIA2-AWS_RECREATIONAL",
                    "value": "to_INDIA2-AWS_RECREATIONAL"
                },
                "datasource": {
                    "type": "influxdb",
                    "uid": "ec_telem_influx"
                },
                "definition": "import \"influxdata/influxdb/schema\"\nschema.tagValues(\n    bucket: \"${db_bucket}\",\n    tag: \"tunnel_alias\",\n    //predicate: (r) => r[\"hostname\"] == \"${ec_hostname}\" and r[\"tunnel_alias\"] !~ /^Passthrough_/,\n    predicate: (r) => r[\"hostname\"] == \"${ec_hostname}\",\n)\n",
                "description": "Populates Peer Tunnel Analysis Row",
                "hide": 0,
                "includeAll": false,
                "label": "Peer Tunnel to Analyze",
                "multi": false,
                "name": "tunnel_analysis_peer",
                "options": [],
                "query": "import \"influxdata/influxdb/schema\"\nschema.tagValues(\n    bucket: \"${db_bucket}\",\n    tag: \"tunnel_alias\",\n    //predicate: (r) => r[\"hostname\"] == \"${ec_hostname}\" and r[\"tunnel_alias\"] !~ /^Passthrough_/,\n    predicate: (r) => r[\"hostname\"] == \"${ec_hostname}\",\n)\n",
                "refresh": 1,
                "regex": "",
                "skipUrlSync": false,
                "sort": 0,
                "type": "query"
            },
            {
                "current": {
                    "selected": true,
                    "text": [
                        "All"
                    ],
                    "value": [
                        "$__all"
                    ]
                },
                "datasource": {
                    "type": "influxdb",
                    "uid": "ec_telem_influx"
                },
                "definition": "import \"influxdata/influxdb/schema\"\nschema.tagValues(\n    bucket: \"${db_bucket}\",\n    tag: \"interface_label\",\n    predicate: (r) => r[\"hostname\"] == \"${ec_hostname}\" and r[\"lan/wan\"] == \"WAN\",\n)\n",
                "hide": 2,
                "includeAll": true,
                "label": "WAN Labels",
                "multi": true,
                "name": "wan_labels",
                "options": [],
                "query": "import \"influxdata/influxdb/schema\"\nschema.tagValues(\n    bucket: \"${db_bucket}\",\n    tag: \"interface_label\",\n    predicate: (r) => r[\"hostname\"] == \"${ec_hostname}\" and r[\"lan/wan\"] == \"WAN\",\n)\n",
                "refresh": 1,
                "regex": "",
                "skipUrlSync": false,
                "sort": 6,
                "type": "query"
            },
            {
                "current": {
                    "selected": true,
                    "text": [
                        "All"
                    ],
                    "value": [
                        "$__all"
                    ]
                },
                "datasource": {
                    "type": "influxdb",
                    "uid": "ec_telem_influx"
                },
                "definition": "import \"influxdata/influxdb/schema\"\nschema.tagValues(\n    bucket: \"${db_bucket}\",\n    tag: \"interface_name\",\n    //predicate: (r) => true,\n    predicate: (r) => r[\"hostname\"] == \"${ec_hostname}\" and r[\"interface_label\"] == \"None\",\n)\n",
                "hide": 2,
                "includeAll": true,
                "label": "LAN interfaces",
                "multi": true,
                "name": "lan_interfaces",
                "options": [],
                "query": "import \"influxdata/influxdb/schema\"\nschema.tagValues(\n    bucket: \"${db_bucket}\",\n    tag: \"interface_name\",\n    //predicate: (r) => true,\n    predicate: (r) => r[\"hostname\"] == \"${ec_hostname}\" and r[\"interface_label\"] == \"None\",\n)\n",
                "refresh": 1,
                "regex": "",
                "skipUrlSync": false,
                "sort": 6,
                "type": "query"
            },
            {
                "auto": false,
                "auto_count": 30,
                "auto_min": "10s",
                "current": {
                    "selected": false,
                    "text": "6h",
                    "value": "6h"
                },
                "description": "Period for moving average calculations for metrics performing baseline comparisons",
                "hide": 0,
                "label": "Moving Average Period",
                "name": "baseline_period",
                "options": [
                    {
                        "selected": false,
                        "text": "30m",
                        "value": "30m"
                    },
                    {
                        "selected": false,
                        "text": "1h",
                        "value": "1h"
                    },
                    {
                        "selected": true,
                        "text": "6h",
                        "value": "6h"
                    },
                    {
                        "selected": false,
                        "text": "12h",
                        "value": "12h"
                    },
                    {
                        "selected": false,
                        "text": "1d",
                        "value": "1d"
                    },
                    {
                        "selected": false,
                        "text": "3d",
                        "value": "3d"
                    }
                ],
                "query": "30m,1h,6h,12h,1d,3d",
                "queryValue": "",
                "refresh": 2,
                "skipUrlSync": false,
                "type": "interval"
            }
        ]
    },
    "time": {
        "from": "now-1h",
        "to": "now"
    },
    "timepicker": {},
    "timezone": "",
    "title": "EdgeConnect Telemetry",
    "uid": "ec-appliance",
    "version": 1,
    "weekStart": ""
}